from csdl.rep.graph_representation import GraphRepresentation
from csdl.lang.hybrid_implicit_operation import HybridImplicitOperation
from typing import List, Dict


# TODO: enable nested operations with namespaces
# This function only needs to be called once at compile time
def collect_hybrid_implicit_operations(rep: GraphRepresentation) -> Dict[str, HybridImplicitOperation]:
    operations = rep.operation_nodes()
    hybrid_operations: List[HybridImplicitOperation] = list(
        filter(lambda x: isinstance(x, HybridImplicitOperation),
               operations))
    return {h.name: h for h in hybrid_operations}


# This is an example of how to set tolerances at run time after
# each iteration; you can call this within a loop that iterates over
# names and tolerances generated by SURF
def set_hybrid_tolerance(
    op_dict: Dict[str, HybridImplicitOperation],
    op_name: str,
    tol: float,
):
    op_dict[op_name].nonlinear_solver.options['atol'] = tol
