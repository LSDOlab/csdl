"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3440],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=i,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4426:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),a=["components"],s={},l=void 0,p={unversionedId:"worked_examples/ex_custom_implicit_simple",id:"worked_examples/ex_custom_implicit_simple",isDocsHomePage:!1,title:"ex_custom_implicit_simple",description:"`py",source:"@site/docs/worked_examples/ex_custom_implicit_simple.mdx",sourceDirName:"worked_examples",slug:"/worked_examples/ex_custom_implicit_simple",permalink:"/csdl/docs/worked_examples/ex_custom_implicit_simple",editUrl:"https://github.com/lsdolab/csdl/edit/main/website/docs/worked_examples/ex_custom_implicit_simple.mdx",tags:[],version:"current",frontMatter:{}},c=[],u={toc:c};function m(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"from csdl_om import Simulator\nfrom csdl import CustomExplicitOperation, CustomImplicitOperation, NewtonSolver, ScipyKrylov\nimport csdl\nimport numpy as np\n\n\nclass ExampleImplicitSimple(CustomImplicitOperation):\n    def define(self):\n        self.add_input('a', val=1.)\n        self.add_input('b', val=-4.)\n        self.add_input('c', val=3.)\n        self.add_output('x', val=0.)\n        self.declare_derivatives('x', 'x')\n        self.declare_derivatives('x', ['a', 'b', 'c'])\n\n        self.linear_solver = ScipyKrylov()\n        self.nonlinear_solver = NewtonSolver(solve_subsystems=False)\n\n    def evaluate_residuals(self, inputs, outputs, residuals):\n        x = outputs['x']\n        a = inputs['a']\n        b = inputs['b']\n        c = inputs['c']\n        residuals['x'] = a * x**2 + b * x + c\n\n    def compute_derivatives(self, inputs, outputs, derivatives):\n        a = inputs['a']\n        b = inputs['b']\n        x = outputs['x']\n\n        derivatives['x', 'a'] = x**2\n        derivatives['x', 'b'] = x\n        derivatives['x', 'c'] = 1.0\n        derivatives['x', 'x'] = 2 * a * x + b\n\n\nsim = Simulator(ExampleImplicitSimple())\nsim.run()\n\nprint('x', sim['x'].shape)\nprint(sim['x'])\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"=====\nmodel\n=====\nNL: Newton Converged in 5 iterations\nx (1,)\n[1.]\n")))}m.isMDXComponent=!0}}]);