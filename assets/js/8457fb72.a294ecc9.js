"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5513],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return y}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,p=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),m=l(t),y=i,d=m["".concat(p,".").concat(y)]||m[y]||c[y]||s;return t?r.createElement(d,o(o({ref:n},u),{},{components:t})):r.createElement(d,o({ref:n},u))}));function y(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,o=new Array(s);o[0]=m;var a={};for(var p in n)hasOwnProperty.call(n,p)&&(a[p]=n[p]);a.originalType=e,a.mdxType="string"==typeof e?e:i,o[1]=a;for(var l=2;l<s;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9672:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return u},default:function(){return m}});var r=t(7462),i=t(3366),s=(t(7294),t(3905)),o=["components"],a={},p=void 0,l={unversionedId:"worked_examples/ex_explicit_with_subsystems",id:"worked_examples/ex_explicit_with_subsystems",isDocsHomePage:!1,title:"ex_explicit_with_subsystems",description:"`py",source:"@site/docs/worked_examples/ex_explicit_with_subsystems.mdx",sourceDirName:"worked_examples",slug:"/worked_examples/ex_explicit_with_subsystems",permalink:"/csdl/docs/worked_examples/ex_explicit_with_subsystems",editUrl:"https://github.com/lsdolab/csdl/edit/main/website/docs/worked_examples/ex_explicit_with_subsystems.mdx",tags:[],version:"current",frontMatter:{}},u=[],c={toc:u};function m(e){var n=e.components,t=(0,i.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"from csdl_om import Simulator\nfrom csdl import Model, NonlinearBlockGS\nimport csdl\nimport numpy as np\n\n\nclass ExampleWithSubsystems(Model):\n\n    def define(self):\n        # Create input to main model\n        x1 = self.create_input('x1', val=40)\n\n        # Powers\n        y4 = x1**2\n\n        # Create subsystem that depends on previously created\n        # input to main model\n        m = Model()\n\n        # This value is overwritten by connection from the main model\n        a = m.declare_variable('x1', val=2)\n        b = m.create_input('x2', val=12)\n        m.register_output('prod', a * b)\n        self.add(m, name='subsystem')\n\n        # declare inputs with default values\n        # This value is overwritten by connection\n        # from the submodel\n        x2 = self.declare_variable('x2', val=3)\n\n        # Simple addition\n        y1 = x2 + x1\n        self.register_output('y1', y1)\n\n        # Simple subtraction\n        self.register_output('y2', x2 - x1)\n\n        # Simple multitplication\n        self.register_output('y3', x1 * x2)\n\n        # Powers\n        y5 = x2**2\n\n        # register outputs in reverse order to how they are defined\n        self.register_output('y5', y5)\n        self.register_output('y6', y1 + y5)\n        self.register_output('y4', y4)\n\n\nsim = Simulator(ExampleWithSubsystems())\nsim.run()\n\nprint('prod', sim['prod'].shape)\nprint(sim['prod'])\nprint('y1', sim['y1'].shape)\nprint(sim['y1'])\nprint('y2', sim['y2'].shape)\nprint(sim['y2'])\nprint('y3', sim['y3'].shape)\nprint(sim['y3'])\nprint('y4', sim['y4'].shape)\nprint(sim['y4'])\nprint('y5', sim['y5'].shape)\nprint(sim['y5'])\nprint('y6', sim['y6'].shape)\nprint(sim['y6'])\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-prod",metastring:"(1,)","(1,)":!0},"[480.]\ny1 (1,)\n[52.]\ny2 (1,)\n[-28.]\ny3 (1,)\n[480.]\ny4 (1,)\n[1600.]\ny5 (1,)\n[144.]\ny6 (1,)\n[196.]\n")))}m.isMDXComponent=!0}}]);