"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1317,6247],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return y}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=l(t),y=i,d=u["".concat(p,".").concat(y)]||u[y]||m[y]||s;return t?r.createElement(d,a(a({ref:n},c),{},{components:t})):r.createElement(d,a({ref:n},c))}));function y(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,a=new Array(s);a[0]=u;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var l=2;l<s;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7219:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return p},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return m},default:function(){return y}});var r=t(7462),i=t(3366),s=(t(7294),t(3905)),a=t(9251),o=["components"],p={},l="Simple Explicit Expressions",c={unversionedId:"examples/Basic Examples/simple_explicit",id:"examples/Basic Examples/simple_explicit",isDocsHomePage:!1,title:"Simple Explicit Expressions",description:"In this example, we define some variables that are computed explicitly,",source:"@site/docs/examples/Basic Examples/simple_explicit.mdx",sourceDirName:"examples/Basic Examples",slug:"/examples/Basic Examples/simple_explicit",permalink:"/csdl/docs/examples/Basic Examples/simple_explicit",editUrl:"https://github.com/lsdolab/csdl/edit/main/website/docs/examples/Basic Examples/simple_explicit.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Input to Main Model",permalink:"/csdl/docs/examples/Basic Examples/input"},next:{title:"Simple Explicit Expressions with Subsystems",permalink:"/csdl/docs/examples/Basic Examples/simple_explicit_with_subsystems"}},m=[],u={toc:m};function y(e){var n=e.components,t=(0,i.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"simple-explicit-expressions"},"Simple Explicit Expressions"),(0,s.kt)("p",null,"In this example, we define some variables that are computed explicitly,\nand regiser those variables as outputs.\nEach output in this example is computed explicitly using the basic\nmathematical operations.\nThe example below is described as follows."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Model.declare_variable")," returns a ",(0,s.kt)("inlineCode",{parentName:"p"},"Variable")," object, which\nrepresents a value that comes from outside the current model, either as\nan output of a parent model (a model that is above the current model in\nthe model hierarchy), or an output of a child model (a model that is\nbelow the current model in the model hierarchy)."),(0,s.kt)("p",null,"Some variables are defined using mathematical expressions, and finally,\neach output is registered.\nTo register an output of the model, use the ",(0,s.kt)("inlineCode",{parentName:"p"},"Model.register_output"),"\nmethod.\n",(0,s.kt)("inlineCode",{parentName:"p"},"Model.register_output")," requires a name that the CSDL compiler back end\nwill use to access the variable output.\nThis name does not need to be the same as the Python variable name, but\nit's good practice to stay consistent.\nThe CSDL compiler back end has no knowledge of the Python variable name,\nonly the name provided in methods like ",(0,s.kt)("inlineCode",{parentName:"p"},"Model.create_input"),",\n",(0,s.kt)("inlineCode",{parentName:"p"},"Model.declare_variable"),", and ",(0,s.kt)("inlineCode",{parentName:"p"},"Model.register_output"),"."),(0,s.kt)(a.default,{mdxType:"WorkedExample"}))}y.isMDXComponent=!0},9251:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return c},default:function(){return u}});var r=t(7462),i=t(3366),s=(t(7294),t(3905)),a=["components"],o={},p=void 0,l={unversionedId:"worked_examples/ex_explicit_binary_operations",id:"worked_examples/ex_explicit_binary_operations",isDocsHomePage:!1,title:"ex_explicit_binary_operations",description:"`py",source:"@site/docs/worked_examples/ex_explicit_binary_operations.mdx",sourceDirName:"worked_examples",slug:"/worked_examples/ex_explicit_binary_operations",permalink:"/csdl/docs/worked_examples/ex_explicit_binary_operations",editUrl:"https://github.com/lsdolab/csdl/edit/main/website/docs/worked_examples/ex_explicit_binary_operations.mdx",tags:[],version:"current",frontMatter:{}},c=[],m={toc:c};function u(e){var n=e.components,t=(0,i.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"from csdl_om import Simulator\nfrom csdl import Model, NonlinearBlockGS\nimport csdl\nimport numpy as np\n\n\nclass ExampleBinaryOperations(Model):\n    def define(self):\n        # declare inputs with default values\n        x1 = self.declare_variable('x1', val=2)\n        x2 = self.declare_variable('x2', val=3)\n        x3 = self.declare_variable('x3', val=np.arange(7))\n\n        # Expressions with multiple binary operations\n        y1 = -2 * x1**2 + 4 * x2 + 3\n        self.register_output('y1', y1)\n\n        # Elementwise addition\n        y2 = x2 + x1\n\n        # Elementwise subtraction\n        y3 = x2 - x1\n\n        # Elementwise multitplication\n        y4 = x1 * x2\n\n        # Elementwise division\n        y5 = x1 / x2\n        y6 = x1 / 3\n        y7 = 2 / x2\n\n        # Elementwise Power\n        y8 = x2**2\n        y9 = x1**2\n\n        self.register_output('y2', y2)\n        self.register_output('y3', y3)\n        self.register_output('y4', y4)\n        self.register_output('y5', y5)\n        self.register_output('y6', y6)\n        self.register_output('y7', y7)\n        self.register_output('y8', y8)\n        self.register_output('y9', y9)\n\n        # Adding other expressions\n        self.register_output('y10', y1 + y7)\n\n        # Array with scalar power\n        y11 = x3**2\n        self.register_output('y11', y11)\n\n        # Array with array of powers\n        y12 = x3**(2 * np.ones(7))\n        self.register_output('y12', y12)\n\n\nsim = Simulator(ExampleBinaryOperations())\nsim.run()\n\nprint('y1', sim['y1'].shape)\nprint(sim['y1'])\nprint('y2', sim['y2'].shape)\nprint(sim['y2'])\nprint('y3', sim['y3'].shape)\nprint(sim['y3'])\nprint('y4', sim['y4'].shape)\nprint(sim['y4'])\nprint('y5', sim['y5'].shape)\nprint(sim['y5'])\nprint('y6', sim['y6'].shape)\nprint(sim['y6'])\nprint('y7', sim['y7'].shape)\nprint(sim['y7'])\nprint('y8', sim['y8'].shape)\nprint(sim['y8'])\nprint('y9', sim['y9'].shape)\nprint(sim['y9'])\nprint('y10', sim['y10'].shape)\nprint(sim['y10'])\nprint('y11', sim['y11'].shape)\nprint(sim['y11'])\nprint('y12', sim['y12'].shape)\nprint(sim['y12'])\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-y1",metastring:"(1,)","(1,)":!0},"[7.]\ny2 (1,)\n[5.]\ny3 (1,)\n[1.]\ny4 (1,)\n[6.]\ny5 (1,)\n[0.66666667]\ny6 (1,)\n[0.66666667]\ny7 (1,)\n[0.66666667]\ny8 (1,)\n[9.]\ny9 (1,)\n[4.]\ny10 (1,)\n[7.66666667]\ny11 (7,)\n[ 0.  1.  4.  9. 16. 25. 36.]\ny12 (7,)\n[ 0.  1.  4.  9. 16. 25. 36.]\n")))}u.isMDXComponent=!0}}]);