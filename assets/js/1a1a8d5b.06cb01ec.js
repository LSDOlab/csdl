"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4793],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(r),d=a,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},6439:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),o=["components"],l={},s=void 0,c={unversionedId:"worked_examples/ex_implicit_with_subsystems_bracketed_array",id:"worked_examples/ex_implicit_with_subsystems_bracketed_array",isDocsHomePage:!1,title:"ex_implicit_with_subsystems_bracketed_array",description:"`py",source:"@site/docs/worked_examples/ex_implicit_with_subsystems_bracketed_array.mdx",sourceDirName:"worked_examples",slug:"/worked_examples/ex_implicit_with_subsystems_bracketed_array",permalink:"/csdl/docs/worked_examples/ex_implicit_with_subsystems_bracketed_array",editUrl:"https://github.com/lsdolab/csdl/edit/main/website/docs/worked_examples/ex_implicit_with_subsystems_bracketed_array.mdx",tags:[],version:"current",frontMatter:{}},p=[],m={toc:p};function u(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"from csdl_om import Simulator\nfrom csdl import Model, ImplicitModel, ScipyKrylov, NewtonSolver, NonlinearBlockGS\nimport numpy as np\n\n\nclass ExampleWithSubsystemsBracketedArray(ImplicitModel):\n    def define(self):\n        # define a subsystem (this is a very simple example)\n        model = Model()\n        p = model.create_input('p', val=[7, -7])\n        q = model.create_input('q', val=[8, -8])\n        r = p + q\n        model.register_output('r', r)\n\n        # add child system\n        self.add(model, name='R')\n        # declare output of child system as input to parent system\n        r = self.declare_variable('r', shape=(2, ))\n\n        c = self.declare_variable('c', val=[18, -18])\n\n        # a == (3 + a - 2 * a**2)**(1 / 4)\n        with self.create_model('coeff_a') as model:\n            a = model.create_output('a')\n            a.define((3 + a - 2 * a**2)**(1 / 4))\n            model.nonlinear_solver = NonlinearBlockGS(iprint=0,\n                                                      maxiter=100)\n\n        # store positive and negative values of `a` in an array\n        ap = self.declare_variable('a')\n        an = -ap\n        a = self.create_output('vec_a', shape=(2, ))\n        a[0] = ap\n        a[1] = an\n\n        with self.create_model('coeff_b') as model:\n            model.create_input('b', val=[-4, 4])\n\n        b = self.declare_variable('b', shape=(2, ))\n        y = self.create_implicit_output('y', shape=(2, ))\n        z = a * y**2 + b * y + c - r\n        y.define_residual_bracketed(\n            z,\n            x1=[0, 2.],\n            x2=[2, np.pi],\n        )\n\n\nsim = Simulator(ExampleWithSubsystemsBracketedArray())\nsim.run()\n\nprint('y', sim['y'].shape)\nprint(sim['y'])\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-y",metastring:"(2,)","(2,)":!0},"[1.07440944 2.48391993]\n")))}u.isMDXComponent=!0}}]);