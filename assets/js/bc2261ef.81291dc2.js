"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1542],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return _}});var r=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,i=function(e,t){if(null==e)return{};var a,r,i={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=r.createContext({}),c=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,i=e.mdxType,n=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(a),_=i,m=d["".concat(o,".").concat(_)]||d[_]||u[_]||n;return a?r.createElement(m,l(l({ref:t},p),{},{components:a})):r.createElement(m,l({ref:t},p))}));function _(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=a.length,l=new Array(n);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,l[1]=s;for(var c=2;c<n;c++)l[c]=a[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},6732:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return s},contentTitle:function(){return o},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var r=a(7462),i=a(3366),n=(a(7294),a(3905)),l=["components"],s={title:"SimulatorBase",sidebar_position:2},o=void 0,c={unversionedId:"lang_ref/simulator_base",id:"lang_ref/simulator_base",isDocsHomePage:!1,title:"SimulatorBase",description:"------------------------------------------------------------------------",source:"@site/docs/lang_ref/simulator_base.mdx",sourceDirName:"lang_ref",slug:"/lang_ref/simulator_base",permalink:"/csdl/docs/lang_ref/simulator_base",editUrl:"https://github.com/lsdolab/csdl/edit/main/website/docs/lang_ref/simulator_base.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"SimulatorBase",sidebar_position:2},sidebar:"docs",previous:{title:"Output",permalink:"/csdl/docs/lang_ref/output"},next:{title:"Custom Operations",permalink:"/csdl/docs/lang_ref/custom"}},p=[{value:"_ReprClass Objects",id:"_reprclass-objects",children:[{value:"__init__",id:"__init__",children:[]},{value:"__repr__",id:"__repr__",children:[]}]},{value:"SimulatorBase Objects",id:"simulatorbase-objects",children:[{value:"__init__",id:"__init__-1",children:[]},{value:"__getitem__",id:"__getitem__",children:[]},{value:"__setitem__",id:"__setitem__",children:[]},{value:"run",id:"run",children:[]},{value:"compute_total_derivatives",id:"compute_total_derivatives",children:[]},{value:"compute_exact_hessian",id:"compute_exact_hessian",children:[]},{value:"check_partials",id:"check_partials",children:[]},{value:"assert_check_partials",id:"assert_check_partials",children:[]},{value:"visualize_implementation",id:"visualize_implementation",children:[]},{value:"objective",id:"objective",children:[]},{value:"design_variables",id:"design_variables",children:[]},{value:"constraints",id:"constraints",children:[]},{value:"implicit_outputs",id:"implicit_outputs",children:[]},{value:"residuals",id:"residuals",children:[]},{value:"objective_gradient",id:"objective_gradient",children:[]},{value:"constraint_jacobian",id:"constraint_jacobian",children:[]},{value:"residuals_jacobian",id:"residuals_jacobian",children:[]}]}],u={toc:p};function d(e){var t=e.components,a=(0,i.Z)(e,l);return(0,n.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("hr",null),(0,n.kt)("a",{id:"csdl.core.simulator_base"}),(0,n.kt)("h1",{id:"csdlcoresimulator_base"},"csdl.core.simulator","_","base"),(0,n.kt)("a",{id:"csdl.core.simulator_base._ReprClass"}),(0,n.kt)("h2",{id:"_reprclass-objects"},"_","ReprClass Objects"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"class _ReprClass(object)\n")),(0,n.kt)("p",null,"Class for defining objects with a simple constant string ",(0,n.kt)("strong",{parentName:"p"},"repr"),"."),(0,n.kt)("p",null,"This is useful for constants used in arg lists when you want them to appear in\nautomatically generated source documentation as a certain string instead of python's\ndefault representation."),(0,n.kt)("a",{id:"csdl.core.simulator_base._ReprClass.__init__"}),(0,n.kt)("h3",{id:"__init__"},"_","_","init","_","_"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(repr_string)\n")),(0,n.kt)("p",null,"Inititialize the ",(0,n.kt)("strong",{parentName:"p"},"repr")," string."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("p",null,"repr_string : str\nThe string to be returned by ",(0,n.kt)("strong",{parentName:"p"},"repr")),(0,n.kt)("a",{id:"csdl.core.simulator_base._ReprClass.__repr__"}),(0,n.kt)("h3",{id:"__repr__"},"_","_","repr","_","_"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def __repr__()\n")),(0,n.kt)("p",null,"Return our _repr_string."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns")),(0,n.kt)("p",null,"str\nWhatever string we were initialized with."),(0,n.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase"}),(0,n.kt)("h2",{id:"simulatorbase-objects"},"SimulatorBase Objects"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"class SimulatorBase()\n")),(0,n.kt)("p",null,"A class that can be used as a base class for the ",(0,n.kt)("inlineCode",{parentName:"p"},"Simulator")," class\nthat a CSDL compiler back end would provide.\nThis class is only here so that CSDL users and CSDL compiler back end\ndevelopers have API documentation.\nCSDL users are not to use the ",(0,n.kt)("inlineCode",{parentName:"p"},"SimulatorBase")," class provided by\n",(0,n.kt)("inlineCode",{parentName:"p"},"csdl"),", only the ",(0,n.kt)("inlineCode",{parentName:"p"},"Simulator")," class provided by the CSDL compiler\nback end of choice."),(0,n.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.__init__"}),(0,n.kt)("h3",{id:"__init__-1"},"_","_","init","_","_"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(model, reorder=False)\n")),(0,n.kt)("p",null,"Constructor."),(0,n.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.__getitem__"}),(0,n.kt)("h3",{id:"__getitem__"},"_","_","getitem","_","_"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def __getitem__(key)\n")),(0,n.kt)("p",null,"Method to get variable values before or after a simulation run"),(0,n.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.__setitem__"}),(0,n.kt)("h3",{id:"__setitem__"},"_","_","setitem","_","_"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def __setitem__(key, val)\n")),(0,n.kt)("p",null,"Method to set values for variables by name"),(0,n.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.run"}),(0,n.kt)("h3",{id:"run"},"run"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def run()\n")),(0,n.kt)("p",null,"Method to run a simulation once. This method should be\nimplemented so that it can be called repeatedly to solve an\noptimization problem."),(0,n.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.compute_total_derivatives"}),(0,n.kt)("h3",{id:"compute_total_derivatives"},"compute","_","total","_","derivatives"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def compute_total_derivatives() -> OrderedDict\n")),(0,n.kt)("p",null,"Method to compute total derivatives for use by an optimizer"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"`OrderedDict[str, Any]`\n")),(0,n.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.compute_exact_hessian"}),(0,n.kt)("h3",{id:"compute_exact_hessian"},"compute","_","exact","_","hessian"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def compute_exact_hessian()\n")),(0,n.kt)("p",null,"Method to compute exact Hessian"),(0,n.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.check_partials"}),(0,n.kt)("h3",{id:"check_partials"},"check","_","partials"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def check_partials()\n")),(0,n.kt)("p",null,"Method to compute the error for all partial derivatives of all\noperations within the model."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns")),(0,n.kt)("p",null,"An object that is compatible with ",(0,n.kt)("inlineCode",{parentName:"p"},"assert_check_partials")),(0,n.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.assert_check_partials"}),(0,n.kt)("h3",{id:"assert_check_partials"},"assert","_","check","_","partials"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def assert_check_partials(result, atol=1e-8, rtol=1e-8)\n")),(0,n.kt)("p",null,"Method to check that the partial derivatives of all operations\nare within a specified tolerance."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"result"),": Return type of ",(0,n.kt)("inlineCode",{parentName:"p"},"check_partials")),(0,n.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.visualize_implementation"}),(0,n.kt)("h3",{id:"visualize_implementation"},"visualize","_","implementation"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def visualize_implementation()\n")),(0,n.kt)("p",null,"A method for the back end to provide its own visualization of\nthe model."),(0,n.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.objective"}),(0,n.kt)("h3",{id:"objective"},"objective"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def objective() -> Dict[str, Any]\n")),(0,n.kt)("p",null,"Method to provide optimizer with objective"),(0,n.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.design_variables"}),(0,n.kt)("h3",{id:"design_variables"},"design","_","variables"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def design_variables() -> OrderedDict\n")),(0,n.kt)("p",null,"Method to provide optimizer with design variables\n",(0,n.kt)("strong",{parentName:"p"},"Returns")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"`OrderedDict[str, Dict[str, Any]]`\n")),(0,n.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.constraints"}),(0,n.kt)("h3",{id:"constraints"},"constraints"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def constraints() -> OrderedDict\n")),(0,n.kt)("p",null,"Method to provide optimizer with constraints"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"`OrderedDict[str, Dict[str, Any]]`\n")),(0,n.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.implicit_outputs"}),(0,n.kt)("h3",{id:"implicit_outputs"},"implicit","_","outputs"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def implicit_outputs()\n")),(0,n.kt)("p",null,"Method to provide optimizer with implicit_outputs"),(0,n.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.residuals"}),(0,n.kt)("h3",{id:"residuals"},"residuals"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def residuals()\n")),(0,n.kt)("p",null,"Method to provide optimizer with residuals"),(0,n.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.objective_gradient"}),(0,n.kt)("h3",{id:"objective_gradient"},"objective","_","gradient"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def objective_gradient() -> OrderedDict\n")),(0,n.kt)("p",null,"Method to provide optimizer with total derivative of objective\nwith respect to design variables"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"`OrderedDict[Tuple[str, str], Any]`\n")),(0,n.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.constraint_jacobian"}),(0,n.kt)("h3",{id:"constraint_jacobian"},"constraint","_","jacobian"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def constraint_jacobian() -> OrderedDict\n")),(0,n.kt)("p",null,"Method to provide optimizer with total derivatives of\nconstraints with respect to design variables"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"`OrderedDict[Tuple[str, str], Any]`\n")),(0,n.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.residuals_jacobian"}),(0,n.kt)("h3",{id:"residuals_jacobian"},"residuals","_","jacobian"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def residuals_jacobian()\n")),(0,n.kt)("p",null,"Method to provide optimizer with total derivatives of\nresiduals with respect to design variables"))}d.isMDXComponent=!0}}]);