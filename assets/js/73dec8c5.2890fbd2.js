"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4678],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var i=n(7294);function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,i,p=function(e,t){if(null==e)return{};var n,i,p={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(p[n]=e[n]);return p}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(p[n]=e[n])}return p}var o=i.createContext({}),s=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},l=function(e){var t=s(e.components);return i.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,p=e.mdxType,a=e.originalType,o=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),d=s(n),m=p,_=d["".concat(o,".").concat(m)]||d[m]||c[m]||a;return n?i.createElement(_,r(r({ref:t},l),{},{components:n})):i.createElement(_,r({ref:t},l))}));function m(e,t){var n=arguments,p=t&&t.mdxType;if("string"==typeof e||p){var a=n.length,r=new Array(a);r[0]=d;var u={};for(var o in t)hasOwnProperty.call(t,o)&&(u[o]=t[o]);u.originalType=e,u.mdxType="string"==typeof e?e:p,r[1]=u;for(var s=2;s<a;s++)r[s]=n[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6232:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return o},metadata:function(){return s},toc:function(){return l},default:function(){return d}});var i=n(7462),p=n(3366),a=(n(7294),n(3905)),r=["components"],u={title:"Custom Operations",sidebar_position:3},o=void 0,s={unversionedId:"lang_ref/custom",id:"lang_ref/custom",isDocsHomePage:!1,title:"Custom Operations",description:"------------------------------------------------------------------------",source:"@site/docs/lang_ref/custom.mdx",sourceDirName:"lang_ref",slug:"/lang_ref/custom",permalink:"/csdl/docs/lang_ref/custom",editUrl:"https://github.com/lsdolab/csdl/edit/main/website/docs/lang_ref/custom.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Custom Operations",sidebar_position:3},sidebar:"docs",previous:{title:"SimulatorBase",permalink:"/csdl/docs/lang_ref/simulator_base"},next:{title:"Array Expansion and Contraction",permalink:"/csdl/docs/std_lib_ref/Array Operations/expand"}},l=[{value:"ExplicitOperation Objects",id:"explicitoperation-objects",children:[{value:"compute",id:"compute",children:[]},{value:"compute_derivatives",id:"compute_derivatives",children:[]},{value:"compute_jacvec_product",id:"compute_jacvec_product",children:[]}]},{value:"ImplicitOperation Objects",id:"implicitoperation-objects",children:[{value:"evaluate_residuals",id:"evaluate_residuals",children:[]},{value:"compute_derivatives",id:"compute_derivatives-1",children:[]},{value:"solve_residual_equations",id:"solve_residual_equations",children:[]},{value:"apply_inverse_jacobian",id:"apply_inverse_jacobian",children:[]},{value:"compute_jacvec_product",id:"compute_jacvec_product-1",children:[]}]}],c={toc:l};function d(e){var t=e.components,n=(0,p.Z)(e,r);return(0,a.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("hr",null),(0,a.kt)("a",{id:"csdl.core.explicit_operation"}),(0,a.kt)("h1",{id:"csdlcoreexplicit_operation"},"csdl.core.explicit","_","operation"),(0,a.kt)("a",{id:"csdl.core.explicit_operation.ExplicitOperation"}),(0,a.kt)("h2",{id:"explicitoperation-objects"},"ExplicitOperation Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class ExplicitOperation(CustomOperation)\n")),(0,a.kt)("a",{id:"csdl.core.explicit_operation.ExplicitOperation.compute"}),(0,a.kt)("h3",{id:"compute"},"compute"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def compute(inputs, outputs)\n")),(0,a.kt)("p",null,"Define outputs as an explicit function of the inputs"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example")),(0,a.kt)("p",null,".. code-block:: python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"def compute(self, inputs, outputs):\n    outputs['L'] = 1/2 * inputs['Cl'] * inputs['rho'] * inputs['V']**2 * inputs['S']\n    outputs['D'] = 1/2 * inputs['Cd'] * inputs['rho'] * inputs['V']**2 * inputs['S']\n")),(0,a.kt)("a",{id:"csdl.core.explicit_operation.ExplicitOperation.compute_derivatives"}),(0,a.kt)("h3",{id:"compute_derivatives"},"compute","_","derivatives"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def compute_derivatives(inputs, derivatives)\n")),(0,a.kt)("p",null,"User defined method to compute partial derivatives for this\noperation"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example")),(0,a.kt)("p",null,".. code-block:: python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"def compute(self, inputs, outputs):\n    outputs['L'] = 1/2 * inputs['Cl'] * inputs['rho'] * inputs['V']**2 * inputs['S']\n    outputs['D'] = 1/2 * inputs['Cd'] * inputs['rho'] * inputs['V']**2 * inputs['S']\n\ndef compute_derivatives(self, inputs, derivatives):\n    derivatives['L', 'Cl'] = 1/2 * inputs['rho'] * inputs['V']**2 * inputs['S']\n    derivatives['L', 'rho'] = 1/2 * inputs['Cl'] * inputs['V']**2 * inputs['S']\n    derivatives['L', 'V'] = inputs['Cl'] * inputs['rho'] * inputs['V'] * inputs['S']\n    derivatives['L', 'S'] = 1/2 * inputs['Cl'] * inputs['rho'] * inputs['V']**2\n\n    derivatives['D', 'Cd'] = 1/2 * inputs['rho'] * inputs['V']**2 * inputs['S']\n    derivatives['D', 'rho'] = 1/2 * inputs['Cd'] * inputs['V']**2 * inputs['S']\n    derivatives['D', 'V'] = inputs['Cd'] * inputs['rho'] * inputs['V'] * inputs['S']\n    derivatives['D', 'S'] = 1/2 * inputs['Cd'] * inputs['rho'] * inputs['V']**2\n")),(0,a.kt)("a",{id:"csdl.core.explicit_operation.ExplicitOperation.compute_jacvec_product"}),(0,a.kt)("h3",{id:"compute_jacvec_product"},"compute","_","jacvec","_","product"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def compute_jacvec_product(inputs, d_inputs, d_outputs, mode)\n")),(0,a.kt)("p",null,"[Optional]"," Implement partial derivatives by computing a\nmatrix-vector product"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Example")),(0,a.kt)("p",null,".. code-block:: python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"def compute(self, inputs, outputs):\n    outputs['area'] = inputs['length'] * inputs['width']\n\ndef compute_jacvec_product(self, inputs, d_inputs, d_outputs, mode):\n    if mode == 'fwd':\n        if 'area' in d_outputs:\n            if 'length' in d_inputs:\n                d_outputs['area'] += inputs['width'] * d_inputs['length']\n            if 'width' in d_inputs:\n                d_outputs['area'] += inputs['length'] * d_inputs['width']\n    elif mode == 'rev':\n        if 'area' in d_outputs:\n            if 'length' in d_inputs:\n                d_inputs['length'] += inputs['width'] * d_outputs['area']\n            if 'width' in d_inputs:\n                d_inputs['width'] += inputs['length'] * d_outputs['area']\n")),(0,a.kt)("a",{id:"csdl.core.implicit_operation"}),(0,a.kt)("h1",{id:"csdlcoreimplicit_operation"},"csdl.core.implicit","_","operation"),(0,a.kt)("a",{id:"csdl.core.implicit_operation.ImplicitOperation"}),(0,a.kt)("h2",{id:"implicitoperation-objects"},"ImplicitOperation Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class ImplicitOperation(CustomOperation)\n")),(0,a.kt)("a",{id:"csdl.core.implicit_operation.ImplicitOperation.evaluate_residuals"}),(0,a.kt)("h3",{id:"evaluate_residuals"},"evaluate","_","residuals"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def evaluate_residuals(inputs, outputs, residuals)\n")),(0,a.kt)("p",null,"User defined method to evaluate residuals"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Example")),(0,a.kt)("p",null,".. code-block:: python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"def evaluate_residuals(self, inputs, outputs, residuals):\n    x = outputs['x']\n    a = inputs['a']\n    b = inputs['b']\n    c = inputs['c']\n    residuals['x'] = a * x**2 + b * x + c\n")),(0,a.kt)("a",{id:"csdl.core.implicit_operation.ImplicitOperation.compute_derivatives"}),(0,a.kt)("h3",{id:"compute_derivatives-1"},"compute","_","derivatives"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def compute_derivatives(inputs, outputs, derivatives)\n")),(0,a.kt)("p",null,"[Optional]"," User defined method to evaluate exact derivatives of\nresiduals wrt inputs and outputs"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Example")),(0,a.kt)("p",null,".. code-block:: python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"def compute_derivatives(self, inputs, outputs, derivatives):\n    a = inputs['a']\n    b = inputs['b']\n    x = outputs['x']\n\n    derivatives['x', 'a'] = x**2\n    derivatives['x', 'b'] = x\n    derivatives['x', 'c'] = 1.0\n    derivatives['x', 'x'] = 2 * a * x + b\n\n    # only necessary if implementing `apply_inverse_jacobian`\n    self.inv_jac = 1.0 / (2 * a * x + b)\n")),(0,a.kt)("a",{id:"csdl.core.implicit_operation.ImplicitOperation.solve_residual_equations"}),(0,a.kt)("h3",{id:"solve_residual_equations"},"solve","_","residual","_","equations"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def solve_residual_equations(inputs, outputs)\n")),(0,a.kt)("p",null,"[Optional]"," User defined method to solve residual equations,\ncomputing the outputs given the inputs. Define this method to\nimplement a custom solver. Assigning a nonlinear solver will\ncause ",(0,a.kt)("inlineCode",{parentName:"p"},"evaluate_residual_equations")," to run instead."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Example")),(0,a.kt)("p",null,".. code-block:: python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"def solve_residual_equations(self, inputs, outputs):\n    a = inputs['a']\n    b = inputs['b']\n    c = inputs['c']\n    outputs['x'] = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n")),(0,a.kt)("a",{id:"csdl.core.implicit_operation.ImplicitOperation.apply_inverse_jacobian"}),(0,a.kt)("h3",{id:"apply_inverse_jacobian"},"apply","_","inverse","_","jacobian"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def apply_inverse_jacobian(d_outputs, d_residuals, mode)\n")),(0,a.kt)("p",null,"[Optional]"," Solve linear system. Invoked when solving coupled\nlinear system; i.e. when solving Newton system to update\nimplicit state variables, and when computing total derivatives"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Example")),(0,a.kt)("p",null,".. code-block:: python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# using self.inv_jac defined in `compute_derivatives` example\ndef apply_inverse_jacobian( self, d_outputs, d_residuals, mode)\n    if mode == 'fwd':\n        d_outputs['x'] = self.inv_jac * d_residuals['x']\n    elif mode == 'rev':\n        d_residuals['x'] = self.inv_jac * d_outputs['x']\n")),(0,a.kt)("a",{id:"csdl.core.implicit_operation.ImplicitOperation.compute_jacvec_product"}),(0,a.kt)("h3",{id:"compute_jacvec_product-1"},"compute","_","jacvec","_","product"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def compute_jacvec_product(inputs, outputs, d_inputs, d_outputs, d_residuals, mode)\n")),(0,a.kt)("p",null,"[Optional]"," Implement partial derivatives by computing a\nmatrix-vector product."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Example")),(0,a.kt)("p",null,".. code-block:: python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"def compute_jacvec_product(\n        self,\n        inputs,\n        outputs,\n        d_inputs,\n        d_outputs,\n        d_residuals,\n        mode,\n    ):\n        a = inputs['a']\n        b = inputs['b']\n        c = inputs['c']\n        x = outputs['x']\n        if mode == 'fwd':\n            if 'x' in d_residuals:\n                if 'x' in d_outputs:\n                    d_residuals['x'] += (2 * a * x + b) * d_outputs['x']\n                if 'a' in d_inputs:\n                    d_residuals['x'] += x ** 2 * d_inputs['a']\n                if 'b' in d_inputs:\n                    d_residuals['x'] += x * d_inputs['b']\n                if 'c' in d_inputs:\n                    d_residuals['x'] += d_inputs['c']\n        elif mode == 'rev':\n            if 'x' in d_residuals:\n                if 'x' in d_outputs:\n                    d_outputs['x'] += (2 * a * x + b) * d_residuals['x']\n                if 'a' in d_inputs:\n                    d_inputs['a'] += x ** 2 * d_residuals['x']\n                if 'b' in d_inputs:\n                    d_inputs['b'] += x * d_residuals['x']\n                if 'c' in d_inputs:\n                    d_inputs['c'] += d_residuals['x']\n")))}d.isMDXComponent=!0}}]);