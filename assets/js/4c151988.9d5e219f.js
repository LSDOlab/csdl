"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5322],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(t),f=o,m=u["".concat(p,".").concat(f)]||u[f]||d[f]||a;return t?r.createElement(m,i(i({ref:n},l),{},{components:t})):r.createElement(m,i({ref:n},l))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2284:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return l},default:function(){return u}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],s={title:"Adding Standard Library Operations",sidebar_position:3},p=void 0,c={unversionedId:"developer/contributing/std_lib",id:"developer/contributing/std_lib",isDocsHomePage:!1,title:"Adding Standard Library Operations",description:"To add operations to the Standard Library, define a subclass of",source:"@site/docs/developer/contributing/std_lib.mdx",sourceDirName:"developer/contributing",slug:"/developer/contributing/std_lib",permalink:"/csdl/docs/developer/contributing/std_lib",editUrl:"https://github.com/lsdolab/csdl/edit/main/website/docs/developer/contributing/std_lib.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Adding Standard Library Operations",sidebar_position:3},sidebar:"docs",previous:{title:"Adding Examples for Testing and Documentation",permalink:"/csdl/docs/developer/contributing/examples"},next:{title:"Building a Compiler Back End",permalink:"/csdl/docs/developer/contributing/backend"}},l=[],d={toc:l};function u(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"To add operations to the Standard Library, define a subclass of\n",(0,a.kt)("inlineCode",{parentName:"p"},"StandardOperation")," and a function wrapper.\n",(0,a.kt)("inlineCode",{parentName:"p"},"StandardOperation")," function wrappers must take ",(0,a.kt)("inlineCode",{parentName:"p"},"Variable")," objects as\nrequired unnamed arguments.\nIf keyword arguments (kwargs) are required, they must be compile-time\nconstants."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"from csdl.core.standard_operation import StandardOperation\n\nclass power_combination(StandardOperation):\n    def __init__(self, *args, powers, coeff, **kwargs):\n        # set the number of outputs and arguments before calling\n        # superclass constructor; nargs=None implies variable number of\n        # arguments\n        self.nouts = 1\n        self.nargs = None\n        super().__init__(*args, **kwargs)\n\n        # for this particular operation, all arguments must have the\n        # same shape; note that the dependencies were established in\n        # the superclass constructor\n        dep0 = self.dependencies[0]\n        for dep in self.dependencies:\n            if dep0.shape != dep.shape:\n                raise ValueError(\n                    \"Shapes of inputs to linear_combination do not match\")\n\n        # store properties that the compiler can use for IR optimizations\n        self.properties['elementwise'] = True\n\n\n\n        # store compile time constants that the back end will use\n        self.literals['powers'] = powers\n        self.literals['coeff'] = coeff\n\n    # if operation is elementwise, store string to be evaluated when\n    # computing finite difference for a combined operation\n    def define_compute_strings(self):\n        out_name = self.outs[0].name\n        self.compute_string = '{}='.format(out_name)\n        args = self.dependencies\n        powers = self.literals['powers']\n        coeff = self.literals['coeff']\n        # if isinstance(constant, np.ndarray):\n        #     raise notimplementederror(\"constant must be a scalar constant\")\n        if isinstance(powers, (int, float)):\n            powers = [powers] * len(args)\n        self.compute_string = '{}={}'.format(out_name, coeff)\n        for arg, power in zip(args, powers):\n            if not np.all(coeff == 0):\n                self.compute_string += '*{}**{}'.format(arg.name, power)\n            else:\n                self.compute_string = '0'\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"StandardOperation")," subclasses are located in ",(0,a.kt)("inlineCode",{parentName:"p"},"csdl/operations"),".\nTo define the function wrapper that adds the operation to the IR,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'def cos(var):\n    # perform some type checking\n    if not isinstance(var, Variable):\n        raise TypeError(var, " is not an Variable object")\n\n    # construct operation\n    op = ops.cos(var)\n\n    # construct Output(s) that depend(s) on operation, establishing\n    # dependency of Output(s) on operation;\n    # references to all outputs so that compiler may be able to\n    # detect dead code\n    op.outs = (Output(\n        None,\n        op=op,\n        shape=op.dependencies[0].shape,\n    ), )\n\n    # return Outputs\n    return op.outs[0]\n')))}u.isMDXComponent=!0}}]);