"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3168],{3905:function(e,n,r){r.d(n,{Zo:function(){return s},kt:function(){return d}});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function l(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?l(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},l=Object.keys(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=t.createContext({}),p=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},s=function(e){var n=p(e.components);return t.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=p(r),d=a,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||l;return r?t.createElement(f,o(o({ref:n},s),{},{components:r})):t.createElement(f,o({ref:n},s))}));function d(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var p=2;p<l;p++)o[p]=r[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9557:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return s},default:function(){return m}});var t=r(7462),a=r(3366),l=(r(7294),r(3905)),o=["components"],i={},c=void 0,p={unversionedId:"worked_examples/ex_implicit_apply_nonlinear",id:"worked_examples/ex_implicit_apply_nonlinear",isDocsHomePage:!1,title:"ex_implicit_apply_nonlinear",description:"`py",source:"@site/docs/worked_examples/ex_implicit_apply_nonlinear.mdx",sourceDirName:"worked_examples",slug:"/worked_examples/ex_implicit_apply_nonlinear",permalink:"/csdl/docs/worked_examples/ex_implicit_apply_nonlinear",editUrl:"https://github.com/lsdolab/csdl/edit/main/website/docs/worked_examples/ex_implicit_apply_nonlinear.mdx",tags:[],version:"current",frontMatter:{}},s=[],u={toc:s};function m(e){var n=e.components,r=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from csdl_om import Simulator\nfrom csdl import Model, ScipyKrylov, NewtonSolver, NonlinearBlockGS\nimport numpy as np\n\n\nclass ExampleApplyNonlinear(Model):\n    def define(self):\n        # define internal model that defines a residual\n        model = Model()\n        a = model.declare_variable('a', val=1)\n        b = model.declare_variable('b', val=-4)\n        c = model.declare_variable('c', val=3)\n        x = model.declare_variable('x')\n        y = a * x**2 + b * x + c\n        model.register_output('y', y)\n\n        solve_quadratic = self.create_implicit_operation(model)\n        solve_quadratic.declare_state('x', residual='y')\n        solve_quadratic.nonlinear_solver = NewtonSolver(\n            solve_subsystems=False,\n            maxiter=100,\n            iprint=False,\n        )\n        solve_quadratic.linear_solver = ScipyKrylov()\n\n        a = self.declare_variable('a', val=1)\n        b = self.declare_variable('b', val=-4)\n        c = self.declare_variable('c', val=3)\n        x = solve_quadratic(a, b, c)\n\n\nsim = Simulator(ExampleApplyNonlinear())\nsim.run()\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"")))}m.isMDXComponent=!0}}]);