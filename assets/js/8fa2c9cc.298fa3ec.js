"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6247],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return m}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),y=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=y(e.components);return r.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),u=y(t),m=i,f=u["".concat(p,".").concat(m)]||u[m]||c[m]||o;return t?r.createElement(f,s(s({ref:n},l),{},{components:t})):r.createElement(f,s({ref:n},l))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,s=new Array(o);s[0]=u;var a={};for(var p in n)hasOwnProperty.call(n,p)&&(a[p]=n[p]);a.originalType=e,a.mdxType="string"==typeof e?e:i,s[1]=a;for(var y=2;y<o;y++)s[y]=t[y];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9251:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return p},metadata:function(){return y},toc:function(){return l},default:function(){return u}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),s=["components"],a={},p=void 0,y={unversionedId:"worked_examples/ex_explicit_binary_operations",id:"worked_examples/ex_explicit_binary_operations",isDocsHomePage:!1,title:"ex_explicit_binary_operations",description:"`py",source:"@site/docs/worked_examples/ex_explicit_binary_operations.mdx",sourceDirName:"worked_examples",slug:"/worked_examples/ex_explicit_binary_operations",permalink:"/csdl/docs/worked_examples/ex_explicit_binary_operations",editUrl:"https://github.com/lsdolab/csdl/edit/main/website/docs/worked_examples/ex_explicit_binary_operations.mdx",tags:[],version:"current",frontMatter:{}},l=[],c={toc:l};function u(e){var n=e.components,t=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"from csdl_om import Simulator\nfrom csdl import Model, NonlinearBlockGS\nimport csdl\nimport numpy as np\n\n\nclass ExampleBinaryOperations(Model):\n\n    def define(self):\n        # declare inputs with default values\n        x1 = self.declare_variable('x1', val=2)\n        x2 = self.declare_variable('x2', val=3)\n        x3 = self.declare_variable('x3', val=np.arange(7))\n\n        # Expressions with multiple binary operations\n        y1 = -2 * x1**2 + 4 * x2 + 3\n        self.register_output('y1', y1)\n\n        # Elementwise addition\n        y2 = x2 + x1\n\n        # Elementwise subtraction\n        y3 = x2 - x1\n\n        # Elementwise multitplication\n        y4 = x1 * x2\n\n        # Elementwise division\n        y5 = x1 / x2\n        y6 = x1 / 3\n        y7 = 2 / x2\n\n        # Elementwise Power\n        y8 = x2**2\n        y9 = x1**2\n\n        self.register_output('y2', y2)\n        self.register_output('y3', y3)\n        self.register_output('y4', y4)\n        self.register_output('y5', y5)\n        self.register_output('y6', y6)\n        self.register_output('y7', y7)\n        self.register_output('y8', y8)\n        self.register_output('y9', y9)\n\n        # Adding other expressions\n        self.register_output('y10', y1 + y7)\n\n        # Array with scalar power\n        y11 = x3**2\n        self.register_output('y11', y11)\n\n        # Array with array of powers\n        y12 = x3**(2 * np.ones(7))\n        self.register_output('y12', y12)\n\n\nsim = Simulator(ExampleBinaryOperations())\nsim.run()\n\nprint('y1', sim['y1'].shape)\nprint(sim['y1'])\nprint('y2', sim['y2'].shape)\nprint(sim['y2'])\nprint('y3', sim['y3'].shape)\nprint(sim['y3'])\nprint('y4', sim['y4'].shape)\nprint(sim['y4'])\nprint('y5', sim['y5'].shape)\nprint(sim['y5'])\nprint('y6', sim['y6'].shape)\nprint(sim['y6'])\nprint('y7', sim['y7'].shape)\nprint(sim['y7'])\nprint('y8', sim['y8'].shape)\nprint(sim['y8'])\nprint('y9', sim['y9'].shape)\nprint(sim['y9'])\nprint('y10', sim['y10'].shape)\nprint(sim['y10'])\nprint('y11', sim['y11'].shape)\nprint(sim['y11'])\nprint('y12', sim['y12'].shape)\nprint(sim['y12'])\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-y1",metastring:"(1,)","(1,)":!0},"[7.]\ny2 (1,)\n[5.]\ny3 (1,)\n[1.]\ny4 (1,)\n[6.]\ny5 (1,)\n[0.66666667]\ny6 (1,)\n[0.66666667]\ny7 (1,)\n[0.66666667]\ny8 (1,)\n[9.]\ny9 (1,)\n[4.]\ny10 (1,)\n[7.66666667]\ny11 (7,)\n[ 0.  1.  4.  9. 16. 25. 36.]\ny12 (7,)\n[ 0.  1.  4.  9. 16. 25. 36.]\n")))}u.isMDXComponent=!0}}]);