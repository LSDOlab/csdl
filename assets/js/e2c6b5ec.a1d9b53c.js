"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2441,2653],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return d}});var r=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},m=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=u(t),d=s,f=p["".concat(l,".").concat(d)]||p[d]||c[d]||o;return t?r.createElement(f,a(a({ref:n},m),{},{components:t})):r.createElement(f,a({ref:n},m))}));function d(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=t.length,a=new Array(o);a[0]=p;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var u=2;u<o;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},601:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return m},toc:function(){return c},default:function(){return d}});var r=t(7462),s=t(3366),o=(t(7294),t(3905)),a=t(845),i=["components"],l={},u="Sum of a Single Tensor",m={unversionedId:"examples/Standard Library/sum/ex_sum_single_tensor",id:"examples/Standard Library/sum/ex_sum_single_tensor",isDocsHomePage:!1,title:"Sum of a Single Tensor",description:"This is an example of computing the sum of a single tensor input.",source:"@site/docs/examples/Standard Library/sum/ex_sum_single_tensor.mdx",sourceDirName:"examples/Standard Library/sum",slug:"/examples/Standard Library/sum/ex_sum_single_tensor",permalink:"/csdl/docs/examples/Standard Library/sum/ex_sum_single_tensor",editUrl:"https://github.com/lsdolab/csdl/edit/main/website/docs/examples/Standard Library/sum/ex_sum_single_tensor.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Sum of a Single Matrix along Rows",permalink:"/csdl/docs/examples/Standard Library/sum/ex_sum_single_matrix_along1"},next:{title:"Sum of a Single Vector",permalink:"/csdl/docs/examples/Standard Library/sum/ex_sum_single_vector"}},c=[],p={toc:c};function d(e){var n=e.components,t=(0,s.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"sum-of-a-single-tensor"},"Sum of a Single Tensor"),(0,o.kt)("p",null,"This is an example of computing the sum of a single tensor input."),(0,o.kt)(a.default,{mdxType:"WorkedExample"}))}d.isMDXComponent=!0},845:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return m},default:function(){return p}});var r=t(7462),s=t(3366),o=(t(7294),t(3905)),a=["components"],i={},l=void 0,u={unversionedId:"worked_examples/ex_sum_single_tensor",id:"worked_examples/ex_sum_single_tensor",isDocsHomePage:!1,title:"ex_sum_single_tensor",description:"`py",source:"@site/docs/worked_examples/ex_sum_single_tensor.mdx",sourceDirName:"worked_examples",slug:"/worked_examples/ex_sum_single_tensor",permalink:"/csdl/docs/worked_examples/ex_sum_single_tensor",editUrl:"https://github.com/lsdolab/csdl/edit/main/website/docs/worked_examples/ex_sum_single_tensor.mdx",tags:[],version:"current",frontMatter:{}},m=[],c={toc:m};function p(e){var n=e.components,t=(0,s.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"from csdl_om import Simulator\nfrom csdl import Model\nimport csdl\nimport numpy as np\n\n\nclass ExampleSingleTensor(Model):\n    def define(self):\n        n = 3\n        m = 4\n        p = 5\n        q = 6\n\n        # Declare a tensor of shape 3x6x7x10 as input\n        T1 = self.declare_variable('T1',\n                                   val=np.arange(n * m * p * q).reshape(\n                                       (n, m, p, q)))\n        # Output the sum of all the elements of the matrix M1\n        self.register_output('single_tensor_sum', csdl.sum(T1))\n\n\nsim = Simulator(ExampleSingleTensor())\nsim.run()\n\nprint('T1', sim['T1'].shape)\nprint(sim['T1'])\nprint('single_tensor_sum', sim['single_tensor_sum'].shape)\nprint(sim['single_tensor_sum'])\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-T1",metastring:"(3, 4, 5, 6)","(3,":!0,"4,":!0,"5,":!0,"6)":!0},"[[[[  0.   1.   2.   3.   4.   5.]\n   [  6.   7.   8.   9.  10.  11.]\n   [ 12.  13.  14.  15.  16.  17.]\n   [ 18.  19.  20.  21.  22.  23.]\n   [ 24.  25.  26.  27.  28.  29.]]\n\n  [[ 30.  31.  32.  33.  34.  35.]\n   [ 36.  37.  38.  39.  40.  41.]\n   [ 42.  43.  44.  45.  46.  47.]\n   [ 48.  49.  50.  51.  52.  53.]\n   [ 54.  55.  56.  57.  58.  59.]]\n\n  [[ 60.  61.  62.  63.  64.  65.]\n   [ 66.  67.  68.  69.  70.  71.]\n   [ 72.  73.  74.  75.  76.  77.]\n   [ 78.  79.  80.  81.  82.  83.]\n   [ 84.  85.  86.  87.  88.  89.]]\n\n  [[ 90.  91.  92.  93.  94.  95.]\n   [ 96.  97.  98.  99. 100. 101.]\n   [102. 103. 104. 105. 106. 107.]\n   [108. 109. 110. 111. 112. 113.]\n   [114. 115. 116. 117. 118. 119.]]]\n\n\n [[[120. 121. 122. 123. 124. 125.]\n   [126. 127. 128. 129. 130. 131.]\n   [132. 133. 134. 135. 136. 137.]\n   [138. 139. 140. 141. 142. 143.]\n   [144. 145. 146. 147. 148. 149.]]\n\n  [[150. 151. 152. 153. 154. 155.]\n   [156. 157. 158. 159. 160. 161.]\n   [162. 163. 164. 165. 166. 167.]\n   [168. 169. 170. 171. 172. 173.]\n   [174. 175. 176. 177. 178. 179.]]\n\n  [[180. 181. 182. 183. 184. 185.]\n   [186. 187. 188. 189. 190. 191.]\n   [192. 193. 194. 195. 196. 197.]\n   [198. 199. 200. 201. 202. 203.]\n   [204. 205. 206. 207. 208. 209.]]\n\n  [[210. 211. 212. 213. 214. 215.]\n   [216. 217. 218. 219. 220. 221.]\n   [222. 223. 224. 225. 226. 227.]\n   [228. 229. 230. 231. 232. 233.]\n   [234. 235. 236. 237. 238. 239.]]]\n\n\n [[[240. 241. 242. 243. 244. 245.]\n   [246. 247. 248. 249. 250. 251.]\n   [252. 253. 254. 255. 256. 257.]\n   [258. 259. 260. 261. 262. 263.]\n   [264. 265. 266. 267. 268. 269.]]\n\n  [[270. 271. 272. 273. 274. 275.]\n   [276. 277. 278. 279. 280. 281.]\n   [282. 283. 284. 285. 286. 287.]\n   [288. 289. 290. 291. 292. 293.]\n   [294. 295. 296. 297. 298. 299.]]\n\n  [[300. 301. 302. 303. 304. 305.]\n   [306. 307. 308. 309. 310. 311.]\n   [312. 313. 314. 315. 316. 317.]\n   [318. 319. 320. 321. 322. 323.]\n   [324. 325. 326. 327. 328. 329.]]\n\n  [[330. 331. 332. 333. 334. 335.]\n   [336. 337. 338. 339. 340. 341.]\n   [342. 343. 344. 345. 346. 347.]\n   [348. 349. 350. 351. 352. 353.]\n   [354. 355. 356. 357. 358. 359.]]]]\nsingle_tensor_sum (1,)\n[64620.]\n")))}p.isMDXComponent=!0}}]);