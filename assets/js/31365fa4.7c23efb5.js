"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9088],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=i.createContext({}),p=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(o.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,f=d["".concat(o,".").concat(m)]||d[m]||s[m]||l;return n?i.createElement(f,a(a({ref:t},c),{},{components:n})):i.createElement(f,a({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,a=new Array(l);a[0]=d;var u={};for(var o in t)hasOwnProperty.call(t,o)&&(u[o]=t[o]);u.originalType=e,u.mdxType="string"==typeof e?e:r,a[1]=u;for(var p=2;p<l;p++)a[p]=n[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7263:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return o},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var i=n(7462),r=n(3366),l=(n(7294),n(3905)),a=["components"],u={title:"Output",sidebar_position:2},o=void 0,p={unversionedId:"lang_ref/output",id:"lang_ref/output",isDocsHomePage:!1,title:"Output",description:"------------------------------------------------------------------------",source:"@site/docs/lang_ref/output.mdx",sourceDirName:"lang_ref",slug:"/lang_ref/output",permalink:"/csdl/docs/lang_ref/output",editUrl:"https://github.com/lsdolab/csdl/edit/main/website/docs/lang_ref/output.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Output",sidebar_position:2},sidebar:"docs",previous:{title:"Model",permalink:"/csdl/docs/lang_ref/model"},next:{title:"SimulatorBase",permalink:"/csdl/docs/lang_ref/simulator_base"}},c=[{value:"ExplicitOutput Objects",id:"explicitoutput-objects",children:[]},{value:"ImplicitOutput Objects",id:"implicitoutput-objects",children:[]}],s={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,a);return(0,l.kt)("wrapper",(0,i.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("hr",null),(0,l.kt)("a",{id:"csdl.core.explicit_output"}),(0,l.kt)("h1",{id:"csdlcoreexplicit_output"},"csdl.core.explicit","_","output"),(0,l.kt)("a",{id:"csdl.core.explicit_output.ExplicitOutput"}),(0,l.kt)("h2",{id:"explicitoutput-objects"},"ExplicitOutput Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class ExplicitOutput(Output)\n")),(0,l.kt)("p",null,"Class for creating an explicit output"),(0,l.kt)("a",{id:"csdl.core.explicit_output.ExplicitOutput.__init__"}),(0,l.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(name, val=1.0, shape: Tuple[int] = (1, ), units=None, desc='', tags=None, shape_by_conn=False, copy_shape=None, res_units=None, lower=None, upper=None, ref=1.0, ref0=0.0, res_ref=1.0, *args, **kwargs, *, ,)\n")),(0,l.kt)("p",null,"Initialize explicit output"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"name: str\nName of variable to compute explicitly\nshape: Tuple","[int]","\nShape of variable to compute explicitly\nval: Number or ndarray\nInitial value of variable to compute explicitly"),(0,l.kt)("a",{id:"csdl.core.explicit_output.ExplicitOutput.define"}),(0,l.kt)("h4",{id:"define"},"define"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def define(var: Variable)\n")),(0,l.kt)("p",null,"Define expression (in terms of ",(0,l.kt)("inlineCode",{parentName:"p"},"self"),") that computes value for\nthis output. This method defines a cyclic relationship, which\nrequires an iterative solver to converge."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"var: Variable\nThe expression to compute iteratively until convergence"),(0,l.kt)("a",{id:"csdl.core.implicit_output"}),(0,l.kt)("h1",{id:"csdlcoreimplicit_output"},"csdl.core.implicit","_","output"),(0,l.kt)("a",{id:"csdl.core.implicit_output.ImplicitOutput"}),(0,l.kt)("h2",{id:"implicitoutput-objects"},"ImplicitOutput Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class ImplicitOutput(Output)\n")),(0,l.kt)("p",null,"Class for creating an implicit output"),(0,l.kt)("a",{id:"csdl.core.implicit_output.ImplicitOutput.__init__"}),(0,l.kt)("h4",{id:"__init__-1"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(implicit_model, name, val=1.0, shape: Tuple[int] = (1, ), units=None, res_units=None, desc='', lower=None, upper=None, ref=1.0, ref0=0.0, res_ref=1.0, tags=None, shape_by_conn=False, copy_shape=None, *args, **kwargs, *, ,)\n")),(0,l.kt)("p",null,"Initialize implicit output"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"name: str\nName of variable to compute implicitly\nshape: Tuple","[int]","\nShape of variable to compute implicitly\nval: Number or ndarray\nInitial value of variable to compute implicitly"),(0,l.kt)("a",{id:"csdl.core.implicit_output.ImplicitOutput.define_residual"}),(0,l.kt)("h4",{id:"define_residual"},"define","_","residual"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def define_residual(residual: Output)\n")),(0,l.kt)("p",null,"Define the residual that must equal zero for this output to be\ncomputed"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"residual: Output\nResidual expression"),(0,l.kt)("a",{id:"csdl.core.implicit_output.ImplicitOutput.define_residual_bracketed"}),(0,l.kt)("h4",{id:"define_residual_bracketed"},"define","_","residual","_","bracketed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def define_residual_bracketed(residual: Output, x1=0., x2=1.)\n")),(0,l.kt)("p",null,"Define the residual that must equal zero for this output to be\ncomputed"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"residual: Variable\nResidual expression"))}d.isMDXComponent=!0}}]);