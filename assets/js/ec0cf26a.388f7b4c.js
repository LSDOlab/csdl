"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7641,5513],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return u}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},s=Object.keys(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),l=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=l(e.components);return i.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=l(n),u=r,y=d["".concat(p,".").concat(u)]||d[u]||c[u]||s;return n?i.createElement(y,a(a({ref:t},m),{},{components:n})):i.createElement(y,a({ref:t},m))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,a=new Array(s);a[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,a[1]=o;for(var l=2;l<s;l++)a[l]=n[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6398:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return l},metadata:function(){return m},toc:function(){return c},default:function(){return u}});var i=n(7462),r=n(3366),s=(n(7294),n(3905)),a=n(9672),o=["components"],p={},l="Simple Explicit Expressions with Subsystems",m={unversionedId:"examples/Basic Examples/simple_explicit_with_subsystems",id:"examples/Basic Examples/simple_explicit_with_subsystems",isDocsHomePage:!1,title:"Simple Explicit Expressions with Subsystems",description:"`csdl supports constructing model hierarchies via the Model.add`",source:"@site/docs/examples/Basic Examples/simple_explicit_with_subsystems.mdx",sourceDirName:"examples/Basic Examples",slug:"/examples/Basic Examples/simple_explicit_with_subsystems",permalink:"/csdl/docs/examples/Basic Examples/simple_explicit_with_subsystems",editUrl:"https://github.com/lsdolab/csdl/edit/main/website/docs/examples/Basic Examples/simple_explicit_with_subsystems.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Simple Explicit Expressions",permalink:"/csdl/docs/examples/Basic Examples/simple_explicit"},next:{title:"Average of Multiple Matrices",permalink:"/csdl/docs/examples/Standard Library/average/ex_average_multiple_matrix"}},c=[],d={toc:c};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,s.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"simple-explicit-expressions-with-subsystems"},"Simple Explicit Expressions with Subsystems"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"csdl")," supports constructing model hierarchies via the ",(0,s.kt)("inlineCode",{parentName:"p"},"Model.add"),"\nmethod.\nThis example shows one way to define and add a model to the model\nhierarchy.\nThe example starts by creating an input ",(0,s.kt)("inlineCode",{parentName:"p"},"'x1'")," to the main model (the\nmodel at the top of the model hierarchy).\nThe variable ",(0,s.kt)("inlineCode",{parentName:"p"},"'x1'")," is created in the current scope, so any parent\nmodel cannot access ",(0,s.kt)("inlineCode",{parentName:"p"},"'x1'")," unless ",(0,s.kt)("inlineCode",{parentName:"p"},"'x1'")," is promoted to a higher\nlevel in the hierarchy.\nA new variable ",(0,s.kt)("inlineCode",{parentName:"p"},"y4")," in line 12 is defined in terms of ",(0,s.kt)("inlineCode",{parentName:"p"},"x1"),".\nNote that ",(0,s.kt)("inlineCode",{parentName:"p"},"y4")," is the variable's name in Python, not CSDL.\nThe corresponding name for ",(0,s.kt)("inlineCode",{parentName:"p"},"y4")," in CSDL is defined as ",(0,s.kt)("inlineCode",{parentName:"p"},"'y4'")," in line\n45.\nIf a variable is not registered with a CSDL name, then CSDL\nautomatically names the variable.\nThe Python name for a variable does not need to match its name in CSDL,\nbut it is good practice to keep them consistent for readability."),(0,s.kt)("p",null,"In this example, ",(0,s.kt)("inlineCode",{parentName:"p"},"'subsystem'")," declares the variable ",(0,s.kt)("inlineCode",{parentName:"p"},"'x1'"),",\ndeclaring an input to the model ",(0,s.kt)("inlineCode",{parentName:"p"},"'subsystem'")," from either a parent\nmodel, or a child model (in this case the parent model because\n",(0,s.kt)("inlineCode",{parentName:"p"},"'subsystem'")," has no children).\nIn the parent model, the ",(0,s.kt)("inlineCode",{parentName:"p"},"create_input")," method creates an input\n",(0,s.kt)("inlineCode",{parentName:"p"},"'x1'")," to the main model.\nThe variable ",(0,s.kt)("inlineCode",{parentName:"p"},"'x1'")," belongs to the scope of\n",(0,s.kt)("inlineCode",{parentName:"p"},"ExampleWithSubsystems"),".\noutput in the parent ",(0,s.kt)("inlineCode",{parentName:"p"},"Model")," prior to the\ncall to ",(0,s.kt)("inlineCode",{parentName:"p"},"Model.add")," in order to update the input values in\n",(0,s.kt)("inlineCode",{parentName:"p"},"'sys'"),"."),(0,s.kt)("p",null,"promotes on line 22"),(0,s.kt)("p",null,"In this case, there is an input to the main model named ",(0,s.kt)("inlineCode",{parentName:"p"},"'x1'")," in the\nmain model, so when ",(0,s.kt)("inlineCode",{parentName:"p"},"'subsystem'")," is promoted, the declared variable\n",(0,s.kt)("inlineCode",{parentName:"p"},"'x1'")," can be referenced as ",(0,s.kt)("inlineCode",{parentName:"p"},"'x1'")," instead of ",(0,s.kt)("inlineCode",{parentName:"p"},"'subsystem.x1'"),"\nafter line 48."),(0,s.kt)("p",null,"Likewise, if the parent ",(0,s.kt)("inlineCode",{parentName:"p"},"Model")," is to use an output registered in\n",(0,s.kt)("inlineCode",{parentName:"p"},"'subsystem'"),", such as ",(0,s.kt)("inlineCode",{parentName:"p"},"'x2'"),", then the user must call\n",(0,s.kt)("inlineCode",{parentName:"p"},"Model.declare_variable")," after ",(0,s.kt)("inlineCode",{parentName:"p"},"Model.add")," for that variable."),(0,s.kt)(a.default,{mdxType:"WorkedExample"}))}u.isMDXComponent=!0},9672:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return m},default:function(){return d}});var i=n(7462),r=n(3366),s=(n(7294),n(3905)),a=["components"],o={},p=void 0,l={unversionedId:"worked_examples/ex_explicit_with_subsystems",id:"worked_examples/ex_explicit_with_subsystems",isDocsHomePage:!1,title:"ex_explicit_with_subsystems",description:"`py",source:"@site/docs/worked_examples/ex_explicit_with_subsystems.mdx",sourceDirName:"worked_examples",slug:"/worked_examples/ex_explicit_with_subsystems",permalink:"/csdl/docs/worked_examples/ex_explicit_with_subsystems",editUrl:"https://github.com/lsdolab/csdl/edit/main/website/docs/worked_examples/ex_explicit_with_subsystems.mdx",tags:[],version:"current",frontMatter:{}},m=[],c={toc:m};function d(e){var t=e.components,n=(0,r.Z)(e,a);return(0,s.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"from csdl_om import Simulator\nfrom csdl import Model, NonlinearBlockGS\nimport csdl\nimport numpy as np\n\n\nclass ExampleWithSubsystems(Model):\n    def define(self):\n        # Create input to main model\n        x1 = self.create_input('x1', val=40)\n\n        # Powers\n        y4 = x1**2\n\n        # Create subsystem that depends on previously created\n        # input to main model\n        m = Model()\n\n        # This value is overwritten by connection from the main model\n        a = m.declare_variable('x1', val=2)\n        b = m.create_input('x2', val=12)\n        m.register_output('prod', a * b)\n        self.add(m, name='subsystem')\n\n        # declare inputs with default values\n        # This value is overwritten by connection\n        # from the submodel\n        x2 = self.declare_variable('x2', val=3)\n\n        # Simple addition\n        y1 = x2 + x1\n        self.register_output('y1', y1)\n\n        # Simple subtraction\n        self.register_output('y2', x2 - x1)\n\n        # Simple multitplication\n        self.register_output('y3', x1 * x2)\n\n        # Powers\n        y5 = x2**2\n\n        # register outputs in reverse order to how they are defined\n        self.register_output('y5', y5)\n        self.register_output('y6', y1 + y5)\n        self.register_output('y4', y4)\n\n\nsim = Simulator(ExampleWithSubsystems())\nsim.run()\n\nprint('prod', sim['prod'].shape)\nprint(sim['prod'])\nprint('y1', sim['y1'].shape)\nprint(sim['y1'])\nprint('y2', sim['y2'].shape)\nprint(sim['y2'])\nprint('y3', sim['y3'].shape)\nprint(sim['y3'])\nprint('y4', sim['y4'].shape)\nprint(sim['y4'])\nprint('y5', sim['y5'].shape)\nprint(sim['y5'])\nprint('y6', sim['y6'].shape)\nprint(sim['y6'])\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-prod",metastring:"(1,)","(1,)":!0},"[480.]\ny1 (1,)\n[52.]\ny2 (1,)\n[-28.]\ny3 (1,)\n[480.]\ny4 (1,)\n[1600.]\ny5 (1,)\n[144.]\ny6 (1,)\n[196.]\n")))}d.isMDXComponent=!0}}]);