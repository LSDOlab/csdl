"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8866],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return _}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=s(n),_=i,d=u["".concat(p,".").concat(_)]||u[_]||m[_]||l;return n?r.createElement(d,o(o({ref:t},c),{},{components:n})):r.createElement(d,o({ref:t},c))}));function _(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,o=new Array(l);o[0]=u;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a.mdxType="string"==typeof e?e:i,o[1]=a;for(var s=2;s<l;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4980:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var r=n(7462),i=n(3366),l=(n(7294),n(3905)),o=["components"],a={},p=void 0,s={unversionedId:"worked_examples/ex_implicit_expose_multiple_residuals_with_expose",id:"worked_examples/ex_implicit_expose_multiple_residuals_with_expose",isDocsHomePage:!1,title:"ex_implicit_expose_multiple_residuals_with_expose",description:"`py",source:"@site/docs/worked_examples/ex_implicit_expose_multiple_residuals_with_expose.mdx",sourceDirName:"worked_examples",slug:"/worked_examples/ex_implicit_expose_multiple_residuals_with_expose",permalink:"/csdl/docs/worked_examples/ex_implicit_expose_multiple_residuals_with_expose",editUrl:"https://github.com/lsdolab/csdl/edit/main/website/docs/worked_examples/ex_implicit_expose_multiple_residuals_with_expose.mdx",tags:[],version:"current",frontMatter:{}},c=[],m={toc:c};function u(e){var t=e.components,n=(0,i.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from csdl_om import Simulator\nfrom csdl import Model, ScipyKrylov, NewtonSolver, NonlinearBlockGS\nimport numpy as np\n\n\nclass ExampleMultipleResidualsWithExpose(Model):\n\n    def define(self):\n        m = Model()\n        r = m.declare_variable('r')\n        a = m.declare_variable('a')\n        b = m.declare_variable('b')\n        c = m.declare_variable('c')\n        x = m.declare_variable('x', val=1.5)\n        y = m.declare_variable('y', val=0.9)\n        m.register_output('rx', x**2 + (y - r)**2 - r**2)\n        m.register_output('ry', a * y**2 + b * y + c)\n        m.register_output('t1', a + b + c)\n        m.register_output('t2', x**2)\n        m.register_output('t3', 2 * y)\n        m.register_output('t4', x + y)\n\n        r = self.declare_variable('r', val=2)\n        a = self.declare_variable('a', val=1)\n        b = self.declare_variable('b', val=-3)\n        c = self.declare_variable('c', val=2)\n        solve_multiple_implicit = self.create_implicit_operation(m)\n        solve_multiple_implicit.declare_state('x', residual='rx')\n        solve_multiple_implicit.declare_state('y', residual='ry')\n        solve_multiple_implicit.linear_solver = ScipyKrylov()\n        solve_multiple_implicit.nonlinear_solver = NewtonSolver(\n            solve_subsystems=False)\n\n        x, y, t1, t2, t3, t4 = solve_multiple_implicit(\n            r,\n            a,\n            b,\n            c,\n            expose=['t1', 't2', 't3', 't4'],\n        )\n\n\nsim = Simulator(ExampleMultipleResidualsWithExpose())\nsim.run()\n\nprint('x', sim['x'].shape)\nprint(sim['x'])\nprint('y', sim['y'].shape)\nprint(sim['y'])\nprint('t1', sim['t1'].shape)\nprint(sim['t1'])\nprint('t2', sim['t2'].shape)\nprint(sim['t2'])\nprint('t3', sim['t3'].shape)\nprint(sim['t3'])\nprint('t4', sim['t4'].shape)\nprint(sim['t4'])\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"======================\nModel_implicit_op_006q\n======================\nNL: Newton Converged in 5 iterations\nx (1,)\n[1.73205081]\ny (1,)\n[1.]\nt1 (1,)\n[3.28429328e-47]\nt2 (1,)\n[3.]\nt3 (1,)\n[2.]\nt4 (1,)\n[2.73205081]\n")))}u.isMDXComponent=!0}}]);