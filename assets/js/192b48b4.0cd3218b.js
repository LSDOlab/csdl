"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2511],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,k=c["".concat(s,".").concat(m)]||c[m]||u[m]||l;return n?a.createElement(k,o(o({ref:t},d),{},{components:n})):a.createElement(k,o({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},141:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return c}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),o=["components"],i={title:"Model",sidebar_position:1},s=void 0,p={unversionedId:"lang_ref/model",id:"lang_ref/model",isDocsHomePage:!1,title:"Model",description:"------------------------------------------------------------------------",source:"@site/docs/lang_ref/model.mdx",sourceDirName:"lang_ref",slug:"/lang_ref/model",permalink:"/csdl/docs/lang_ref/model",editUrl:"https://github.com/lsdolab/csdl/edit/main/website/docs/lang_ref/model.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Model",sidebar_position:1},sidebar:"docs",previous:{title:"Tensor Transpose",permalink:"/csdl/docs/examples/Standard Library/transpose/ex_transpose_tensor"},next:{title:"Output",permalink:"/csdl/docs/lang_ref/output"}},d=[{value:"Model Objects",id:"model-objects",children:[{value:"initialize",id:"initialize",children:[]},{value:"define",id:"define",children:[]},{value:"print_var",id:"print_var",children:[]},{value:"add_objective",id:"add_objective",children:[]},{value:"add_design_variable",id:"add_design_variable",children:[]},{value:"add_constraint",id:"add_constraint",children:[]},{value:"declare_variable",id:"declare_variable",children:[]},{value:"create_input",id:"create_input",children:[]},{value:"create_output",id:"create_output",children:[]},{value:"register_output",id:"register_output",children:[]},{value:"add",id:"add",children:[]},{value:"create_submodel",id:"create_submodel",children:[]},{value:"visualize_sparsity",id:"visualize_sparsity",children:[]}]}],u={toc:d};function c(e){var t=e.components,n=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("hr",null),(0,l.kt)("a",{id:"csdl.core.model"}),(0,l.kt)("h1",{id:"csdlcoremodel"},"csdl.core.model"),(0,l.kt)("a",{id:"csdl.core.model.Model"}),(0,l.kt)("h2",{id:"model-objects"},"Model Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Model(, metaclass=_CompilerFrontEndMiddleEnd)\n")),(0,l.kt)("a",{id:"csdl.core.model.Model.initialize"}),(0,l.kt)("h3",{id:"initialize"},"initialize"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def initialize()\n")),(0,l.kt)("p",null,"User defined method to declare parameter values.\nParameters are compile time constants (neither inputs nor\noutputs to the model) and cannot be updated at runtime.\nParameters are intended to make a ",(0,l.kt)("inlineCode",{parentName:"p"},"Model")," subclass definition\ngeneric, and therefore reusable.\nThe example below shows how a ",(0,l.kt)("inlineCode",{parentName:"p"},"Model")," subclass definition uses\nparameters and how the user can set parameters when constructing\nthe example ",(0,l.kt)("inlineCode",{parentName:"p"},"Model")," subclass."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"class Example(Model):\n    def initialize(self):\n        self.parameters.declare('num_times', types=int)\n        self.parameters.declare('step_size', types=float)\n        self.parameters.declare('surface', types=dict)\n\n    def define(self):\n        num_times = self.parameters['num_times']\n        step_size = self.parameters['step_size']\n        surface = self.parameters['surface']\n        name = surface['name'] # str\n        symmetry = surface['symmetry'] # bool\n        mesh = surface['mesh'] # numpy array\n\n        # define runtime behavior...\n\n    surface = {\n        'name': 'wing',\n        'symmetry': False,\n        'mesh': mesh,\n    }\n\n    # compile using Simulator imported from back end...\n    sim = Simulator(\n        Example(\n            num_times=100,\n            step_size=0.1,\n            surface=surface,\n        ),\n    )\n")),(0,l.kt)("a",{id:"csdl.core.model.Model.define"}),(0,l.kt)("h3",{id:"define"},"define"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def define()\n")),(0,l.kt)("p",null,"User defined method to define runtime behavior.\nNote: the user never ",(0,l.kt)("em",{parentName:"p"},"calls")," this method. Only the ",(0,l.kt)("inlineCode",{parentName:"p"},"Simulator"),"\nclass constructor calls this method."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"class Example(Model):\n    def define(self):\n        self.create_input('x')\n        m = 5\n        b = 3\n        y = m*x + b\n        self.register_output('y', y)\n\n# compile using Simulator imported from back end...\nsim = Simulator(Example())\nsim['x'] = -3/5\nsim.run()\nprint(sim['y']) # expect 0\n")),(0,l.kt)("a",{id:"csdl.core.model.Model.print_var"}),(0,l.kt)("h3",{id:"print_var"},"print","_","var"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def print_var(var: Variable)\n")),(0,l.kt)("p",null,"Print ",(0,l.kt)("em",{parentName:"p"},"runtime")," value during execution. Note that ",(0,l.kt)("inlineCode",{parentName:"p"},"print_var"),"\nshould only be used for debugging, as it does have a performance\nimpact. Note that Python's ",(0,l.kt)("inlineCode",{parentName:"p"},"print")," function will print the\nCSDL compile time ",(0,l.kt)("inlineCode",{parentName:"p"},"Variable")," object information, and will have\nno effect on run time execution."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"y = csdl.sin(x)\nprint(y) # will print compile time information about y\nself.print_var(y) # will print run time value of y\n")),(0,l.kt)("a",{id:"csdl.core.model.Model.add_objective"}),(0,l.kt)("h3",{id:"add_objective"},"add","_","objective"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def add_objective(name, ref=None, ref0=None, index=None, units=None, adder=None, scaler=None, parallel_deriv_color=None, cache_linear_solution=False)\n")),(0,l.kt)("p",null,"Declare the objective for the optimization problem. Objective\nmust be a scalar variable."),(0,l.kt)("a",{id:"csdl.core.model.Model.add_design_variable"}),(0,l.kt)("h3",{id:"add_design_variable"},"add","_","design","_","variable"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def add_design_variable(name, lower=None, upper=None, ref=None, ref0=None, indices=None, adder=None, scaler=None, units=None, parallel_deriv_color=None, cache_linear_solution=False)\n")),(0,l.kt)("p",null,"Add a design variable to the optimization problem. The design\nvariable must be an ",(0,l.kt)("inlineCode",{parentName:"p"},"Input"),". This will signal to the optimizer\nthat it is responsible for updating the input variable."),(0,l.kt)("a",{id:"csdl.core.model.Model.add_constraint"}),(0,l.kt)("h3",{id:"add_constraint"},"add","_","constraint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def add_constraint(name, lower=None, upper=None, equals=None, ref=None, ref0=None, adder=None, scaler=None, units=None, indices=None, linear=False, parallel_deriv_color=None, cache_linear_solution=False)\n")),(0,l.kt)("p",null,"Add a constraint to the optimization problem."),(0,l.kt)("a",{id:"csdl.core.model.Model.declare_variable"}),(0,l.kt)("h3",{id:"declare_variable"},"declare","_","variable"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def declare_variable(name: str, val=1.0, shape=(1, ), src_indices=None, flat_src_indices=None, units=None, desc='', tags=None, shape_by_conn=False, copy_shape=None, distributed=None) -> DeclaredVariable\n")),(0,l.kt)("p",null,"Declare an input to use in an expression."),(0,l.kt)("p",null,"An input can be an output of a child ",(0,l.kt)("inlineCode",{parentName:"p"},"System"),". If the user\ndeclares an input that is computed by a child ",(0,l.kt)("inlineCode",{parentName:"p"},"System"),", then\nthe call to ",(0,l.kt)("inlineCode",{parentName:"p"},"self.declare_variable")," must appear after the call to\n",(0,l.kt)("inlineCode",{parentName:"p"},"self.add"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"name: str\nName of variable in CSDL to be used as a local input that\ntakes a value from a parent model, child model, or\npreviously registered output within the model.\nshape: Tuple","[int]","\nShape of variable\nval: Number or ndarray\nDefault value for variable"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,"DocInput\nAn object to use in expressions"),(0,l.kt)("a",{id:"csdl.core.model.Model.create_input"}),(0,l.kt)("h3",{id:"create_input"},"create","_","input"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def create_input(name, val=1.0, shape=(1, ), units=None, desc='', tags=None, shape_by_conn=False, copy_shape=None, distributed=None) -> Input\n")),(0,l.kt)("p",null,"Create an input to the main model, whose value remains constant\nduring model evaluation."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"name: str\nName of variable in CSDL\nshape: Tuple","[int]","\nShape of variable\nval: Number or ndarray\nValue for variable during first model evaluation"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,"Input\nAn object to use in expressions"),(0,l.kt)("a",{id:"csdl.core.model.Model.create_output"}),(0,l.kt)("h3",{id:"create_output"},"create","_","output"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def create_output(name, val=1.0, shape=(1, ), units=None, res_units=None, desc='', lower=None, upper=None, ref=1.0, ref0=0.0, res_ref=1.0, tags=None, shape_by_conn=False, copy_shape=None, distributed=None) -> Concatenation\n")),(0,l.kt)("p",null,"Create a value that is computed explicitly, either through\nindexed assignment, or as a fixed point iteration."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"x = self.create_output('x', shape=(5,3,2))\nx[:, :, 0] = a\nx[:, :, 1] = b\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"name: str\nName of variable in CSDL\nshape: Tuple","[int]","\nShape of variable"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,"Concatenation\nAn object to use in expressions"),(0,l.kt)("a",{id:"csdl.core.model.Model.register_output"}),(0,l.kt)("h3",{id:"register_output"},"register","_","output"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def register_output(name: str, var: Output) -> Output\n")),(0,l.kt)("p",null,"Register ",(0,l.kt)("inlineCode",{parentName:"p"},"var")," as an output of the ",(0,l.kt)("inlineCode",{parentName:"p"},"Model"),".\nWhen adding subsystems, each of the submodel's inputs requires\na call to ",(0,l.kt)("inlineCode",{parentName:"p"},"register_output")," prior to the call to\n",(0,l.kt)("inlineCode",{parentName:"p"},"add"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"name: str")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Name of variable in CSDL\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"var: Output")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Variable that defines output\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Output")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Variable that defines output (same object as argument)\n")),(0,l.kt)("a",{id:"csdl.core.model.Model.add"}),(0,l.kt)("h3",{id:"add"},"add"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def add(submodel, name: str = '', promotes: List[str] = None, promotes_inputs: List[str] = None, promotes_outputs: List[str] = None)\n")),(0,l.kt)("p",null,"Add a submodel to the ",(0,l.kt)("inlineCode",{parentName:"p"},"Model"),"."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"self.add")," call must be preceded by a call to\n",(0,l.kt)("inlineCode",{parentName:"p"},"self.register_output")," for each of the submodel's inputs,\nand followed by ",(0,l.kt)("inlineCode",{parentName:"p"},"self.declare_variable")," for each of the\nsubmodel's outputs."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"name: str\nName of submodel\nsubmodel: System\nSubsystem to add to ",(0,l.kt)("inlineCode",{parentName:"p"},"Model"),"\npromotes: List\nVariables to promote\npromotes_inputs: List\nInputs to promote\npromotes_outputs: List\nOutputs to promote"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,"System\nSubsystem to add to ",(0,l.kt)("inlineCode",{parentName:"p"},"Model")),(0,l.kt)("a",{id:"csdl.core.model.Model.create_submodel"}),(0,l.kt)("h3",{id:"create_submodel"},"create","_","submodel"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@contextmanager\ndef create_submodel(name: str)\n")),(0,l.kt)("p",null,"Create a ",(0,l.kt)("inlineCode",{parentName:"p"},"Model")," object and add as a submodel, promoting all\ninputs and outputs.\nFor use in ",(0,l.kt)("inlineCode",{parentName:"p"},"with")," contexts.\nNOTE: Only use if planning to promote all varaibales within\nchild ",(0,l.kt)("inlineCode",{parentName:"p"},"Model")," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"name: str\nName of new child ",(0,l.kt)("inlineCode",{parentName:"p"},"Model")," object"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,"Model\nChild ",(0,l.kt)("inlineCode",{parentName:"p"},"Model")," object whose variables are all promoted"),(0,l.kt)("a",{id:"csdl.core.model.Model.visualize_sparsity"}),(0,l.kt)("h3",{id:"visualize_sparsity"},"visualize","_","sparsity"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def visualize_sparsity()\n")),(0,l.kt)("p",null,"Visualize the sparsity pattern of jacobian for this model"))}c.isMDXComponent=!0}}]);