"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4841],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return _}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var d=n.createContext({}),o=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=o(e.components);return n.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=o(a),_=i,u=c["".concat(d,".").concat(_)]||c[_]||m[_]||r;return a?n.createElement(u,s(s({ref:t},p),{},{components:a})):n.createElement(u,s({ref:t},p))}));function _(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,s=new Array(r);s[0]=c;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:i,s[1]=l;for(var o=2;o<r;o++)s[o]=a[o];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},9712:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return l},contentTitle:function(){return d},metadata:function(){return o},toc:function(){return p},default:function(){return c}});var n=a(7462),i=a(3366),r=(a(7294),a(3905)),s=["components"],l={title:"Developer API"},d=void 0,o={unversionedId:"developer/api",id:"developer/api",isDocsHomePage:!1,title:"Developer API",description:"------------------------------------------------------------------------",source:"@site/docs/developer/api.mdx",sourceDirName:"developer",slug:"/developer/api",permalink:"/csdl/docs/developer/api",editUrl:"https://github.com/lsdolab/csdl/edit/main/website/docs/developer/api.mdx",tags:[],version:"current",frontMatter:{title:"Developer API"},sidebar:"docs",previous:{title:"Troubleshooting",permalink:"/csdl/docs/troubleshooting"},next:{title:"Reporting an Issue",permalink:"/csdl/docs/developer/contributing/issues"}},p=[{value:"ImplicitOperationFactory Objects",id:"implicitoperationfactory-objects",children:[{value:"__init__",id:"__init__",children:[]},{value:"declare_state",id:"declare_state",children:[]},{value:"__call__",id:"__call__",children:[]},{value:"build_symbol_table",id:"build_symbol_table",children:[]},{value:"build_clean_dag",id:"build_clean_dag",children:[]},{value:"_run_front_end_and_middle_end",id:"_run_front_end_and_middle_end",children:[]}]},{value:"_CompilerFrontEndMiddleEnd Objects",id:"_compilerfrontendmiddleend-objects",children:[{value:"__new__",id:"__new__",children:[]}]},{value:"Model Objects",id:"model-objects",children:[{value:"__init__",id:"__init__-1",children:[]},{value:"initialize",id:"initialize",children:[]},{value:"define",id:"define",children:[]},{value:"_redefine",id:"_redefine",children:[]},{value:"print_var",id:"print_var",children:[]},{value:"add_objective",id:"add_objective",children:[]},{value:"add_design_variable",id:"add_design_variable",children:[]},{value:"add_constraint",id:"add_constraint",children:[]},{value:"connect",id:"connect",children:[]},{value:"declare_variable",id:"declare_variable",children:[]},{value:"create_input",id:"create_input",children:[]},{value:"create_output",id:"create_output",children:[]},{value:"register_output",id:"register_output",children:[]},{value:"add",id:"add",children:[]},{value:"_bracketed_search",id:"_bracketed_search",children:[]},{value:"_implicit_operation",id:"_implicit_operation",children:[]},{value:"_something",id:"_something",children:[]},{value:"_return_implicit_outputs",id:"_return_implicit_outputs",children:[]},{value:"create_implicit_operation",id:"create_implicit_operation",children:[]},{value:"__enter__",id:"__enter__",children:[]},{value:"__exit__",id:"__exit__",children:[]},{value:"create_submodel",id:"create_submodel",children:[]},{value:"visualize_sparsity",id:"visualize_sparsity",children:[]},{value:"visualize_graph",id:"visualize_graph",children:[]},{value:"add_diag_implicit",id:"add_diag_implicit",children:[]},{value:"add_off_diag_implicit",id:"add_off_diag_implicit",children:[]},{value:"add_diag",id:"add_diag",children:[]},{value:"add_off_diag",id:"add_off_diag",children:[]}]},{value:"_ReprClass Objects",id:"_reprclass-objects",children:[{value:"__init__",id:"__init__-2",children:[]},{value:"__repr__",id:"__repr__",children:[]}]},{value:"SimulatorBase Objects",id:"simulatorbase-objects",children:[{value:"__init__",id:"__init__-3",children:[]},{value:"__getitem__",id:"__getitem__",children:[]},{value:"__setitem__",id:"__setitem__",children:[]},{value:"run",id:"run",children:[]},{value:"compute_total_derivatives",id:"compute_total_derivatives",children:[]},{value:"compute_exact_hessian",id:"compute_exact_hessian",children:[]},{value:"check_partials",id:"check_partials",children:[]},{value:"assert_check_partials",id:"assert_check_partials",children:[]},{value:"visualize_implementation",id:"visualize_implementation",children:[]},{value:"objective",id:"objective",children:[]},{value:"design_variables",id:"design_variables",children:[]},{value:"constraints",id:"constraints",children:[]},{value:"implicit_outputs",id:"implicit_outputs",children:[]},{value:"residuals",id:"residuals",children:[]},{value:"objective_gradient",id:"objective_gradient",children:[]},{value:"constraint_jacobian",id:"constraint_jacobian",children:[]},{value:"residuals_jacobian",id:"residuals_jacobian",children:[]}]},{value:"CustomExplicitOperation Objects",id:"customexplicitoperation-objects",children:[{value:"compute",id:"compute",children:[]},{value:"compute_derivatives",id:"compute_derivatives",children:[]},{value:"compute_jacvec_product",id:"compute_jacvec_product",children:[]}]},{value:"CustomImplicitOperation Objects",id:"customimplicitoperation-objects",children:[{value:"__init__",id:"__init__-4",children:[]},{value:"evaluate_residuals",id:"evaluate_residuals",children:[]},{value:"compute_derivatives",id:"compute_derivatives-1",children:[]},{value:"solve_residual_equations",id:"solve_residual_equations",children:[]},{value:"apply_inverse_jacobian",id:"apply_inverse_jacobian",children:[]},{value:"compute_jacvec_product",id:"compute_jacvec_product-1",children:[]},{value:"slice_to_tuple",id:"slice_to_tuple",children:[]}]},{value:"Node Objects",id:"node-objects",children:[{value:"__init__",id:"__init__-5",children:[]},{value:"__iadd__",id:"__iadd__",children:[]},{value:"__iand__",id:"__iand__",children:[]},{value:"__idiv__",id:"__idiv__",children:[]},{value:"__ifloordiv__",id:"__ifloordiv__",children:[]},{value:"__ilshift__",id:"__ilshift__",children:[]},{value:"__imod__",id:"__imod__",children:[]},{value:"__imul__",id:"__imul__",children:[]},{value:"__ior__",id:"__ior__",children:[]},{value:"__ipow__",id:"__ipow__",children:[]},{value:"__irshift__",id:"__irshift__",children:[]},{value:"__isub__",id:"__isub__",children:[]},{value:"__ixor__",id:"__ixor__",children:[]},{value:"add_fwd_edges",id:"add_fwd_edges",children:[]},{value:"remove_fwd_edges",id:"remove_fwd_edges",children:[]},{value:"remove_dependencies",id:"remove_dependencies",children:[]},{value:"add_dependent_node",id:"add_dependent_node",children:[]},{value:"register_nodes",id:"register_nodes",children:[]},{value:"incr_times_visited",id:"incr_times_visited",children:[]},{value:"get_dependency_index",id:"get_dependency_index",children:[]},{value:"remove_dependency_by_index",id:"remove_dependency_by_index",children:[]},{value:"remove_dependency_node",id:"remove_dependency_node",children:[]},{value:"get_dependent_index",id:"get_dependent_index",children:[]},{value:"_dedup_dependencies",id:"_dedup_dependencies",children:[]},{value:"remove_dependent_by_index",id:"remove_dependent_by_index",children:[]},{value:"remove_dependent_node",id:"remove_dependent_node",children:[]},{value:"print_dag",id:"print_dag",children:[]},{value:"get_num_dependents",id:"get_num_dependents",children:[]},{value:"slice_to_tuple",id:"slice_to_tuple-1",children:[]}]},{value:"Variable Objects",id:"variable-objects",children:[{value:"__init__",id:"__init__-6",children:[]},{value:"__pos__",id:"__pos__",children:[]},{value:"__neg__",id:"__neg__",children:[]},{value:"__add__",id:"__add__",children:[]},{value:"__sub__",id:"__sub__",children:[]},{value:"__mul__",id:"__mul__",children:[]},{value:"__truediv__",id:"__truediv__",children:[]},{value:"__pow__",id:"__pow__",children:[]},{value:"__radd__",id:"__radd__",children:[]},{value:"__rsub__",id:"__rsub__",children:[]},{value:"__rmul__",id:"__rmul__",children:[]},{value:"__rtruediv__",id:"__rtruediv__",children:[]},{value:"__getitem__",id:"__getitem__-1",children:[]},{value:"add_dependency_node",id:"add_dependency_node",children:[]}]},{value:"Output Objects",id:"output-objects",children:[{value:"__init__",id:"__init__-7",children:[]}]},{value:"Concatenation Objects",id:"concatenation-objects",children:[{value:"__init__",id:"__init__-8",children:[]},{value:"__setitem__",id:"__setitem__-1",children:[]}]},{value:"Operation Objects",id:"operation-objects",children:[{value:"__init__",id:"__init__-9",children:[]},{value:"add_dependency_node",id:"add_dependency_node-1",children:[]}]},{value:"StandardOperation Objects",id:"standardoperation-objects",children:[{value:"__init__",id:"__init__-10",children:[]},{value:"define_compute_strings",id:"define_compute_strings",children:[]}]},{value:"CustomOperation Objects",id:"customoperation-objects",children:[{value:"__init__",id:"__init__-11",children:[]},{value:"initialize",id:"initialize-1",children:[]},{value:"define",id:"define-1",children:[]},{value:"add_input",id:"add_input",children:[]},{value:"add_output",id:"add_output",children:[]},{value:"declare_derivatives",id:"declare_derivatives",children:[]}]},{value:"Subgraph Objects",id:"subgraph-objects",children:[{value:"__init__",id:"__init__-12",children:[]},{value:"add_dependency_node",id:"add_dependency_node-2",children:[]}]}],m={toc:p};function c(e){var t=e.components,a=(0,i.Z)(e,s);return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("hr",null),(0,r.kt)("a",{id:"csdl.core.model"}),(0,r.kt)("h1",{id:"csdlcoremodel"},"csdl.core.model"),(0,r.kt)("a",{id:"csdl.core.model.ImplicitOperationFactory"}),(0,r.kt)("h2",{id:"implicitoperationfactory-objects"},"ImplicitOperationFactory Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class ImplicitOperationFactory(object)\n")),(0,r.kt)("a",{id:"csdl.core.model.ImplicitOperationFactory.__init__"}),(0,r.kt)("h3",{id:"__init__"},"_","_","init","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(parent, model)\n")),(0,r.kt)("a",{id:"csdl.core.model.ImplicitOperationFactory.declare_state"}),(0,r.kt)("h3",{id:"declare_state"},"declare","_","state"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def declare_state(state: str, bracket: Tuple[Union[int, float, np.ndarray],\n                       Union[int, float, np.ndarray]] = None, val=1.0, units=None, desc='', tags=None, shape_by_conn=False, copy_shape=None, distributed=None, res_units=None, lower=None, upper=None, ref=1.0, ref0=0.0, res_ref=1.0, *, residual: str)\n")),(0,r.kt)("a",{id:"csdl.core.model.ImplicitOperationFactory.__call__"}),(0,r.kt)("h3",{id:"__call__"},"_","_","call","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __call__(*arguments: Variable, *, expose: List[str] = [], defaults: Dict[str, Union[int, float, np.ndarray]] = dict())\n")),(0,r.kt)("a",{id:"csdl.core.model.build_symbol_table"}),(0,r.kt)("h3",{id:"build_symbol_table"},"build","_","symbol","_","table"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def build_symbol_table(symbol_table, node)\n")),(0,r.kt)("a",{id:"csdl.core.model.build_clean_dag"}),(0,r.kt)("h3",{id:"build_clean_dag"},"build","_","clean","_","dag"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def build_clean_dag(registered_outputs)\n")),(0,r.kt)("a",{id:"csdl.core.model._run_front_end_and_middle_end"}),(0,r.kt)("h3",{id:"_run_front_end_and_middle_end"},"_","run","_","front","_","end","_","and","_","middle","_","end"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _run_front_end_and_middle_end(run_front_end: Callable) -> Callable\n")),(0,r.kt)("p",null,"Run CSDL compiler front end (",(0,r.kt)("inlineCode",{parentName:"p"},"Model.define"),") and middle end.\nThe middle end is run immediately after the front end automatically.\n",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," inherits from the metaclass ",(0,r.kt)("inlineCode",{parentName:"p"},"_CompilerFrontEndMiddleEnd"),".\nThe metaclass ",(0,r.kt)("inlineCode",{parentName:"p"},"_CompilerFrontEndMiddleEnd")," replaces the\n",(0,r.kt)("inlineCode",{parentName:"p"},"Model.define")," method with this function, which calls ",(0,r.kt)("inlineCode",{parentName:"p"},"Model.define"),"\nand then performs the functions of the CSDL compiler middle end.\nThe user does not need to opt into running the middle end and cannot\nopt out of running the middle end."),(0,r.kt)("a",{id:"csdl.core.model._CompilerFrontEndMiddleEnd"}),(0,r.kt)("h2",{id:"_compilerfrontendmiddleend-objects"},"_","CompilerFrontEndMiddleEnd Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class _CompilerFrontEndMiddleEnd(type)\n")),(0,r.kt)("a",{id:"csdl.core.model._CompilerFrontEndMiddleEnd.__new__"}),(0,r.kt)("h3",{id:"__new__"},"_","_","new","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __new__(cls, name, bases, attr)\n")),(0,r.kt)("a",{id:"csdl.core.model.Model"}),(0,r.kt)("h2",{id:"model-objects"},"Model Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Model(, metaclass=_CompilerFrontEndMiddleEnd)\n")),(0,r.kt)("a",{id:"csdl.core.model.Model.__init__"}),(0,r.kt)("h3",{id:"__init__-1"},"_","_","init","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(**kwargs)\n")),(0,r.kt)("a",{id:"csdl.core.model.Model.initialize"}),(0,r.kt)("h3",{id:"initialize"},"initialize"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def initialize()\n")),(0,r.kt)("p",null,"User defined method to declare parameter values.\nParameters are compile time constants (neither inputs nor\noutputs to the model) and cannot be updated at runtime.\nParameters are intended to make a ",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," subclass definition\ngeneric, and therefore reusable.\nThe example below shows how a ",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," subclass definition uses\nparameters and how the user can set parameters when constructing\nthe example ",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," subclass."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"class Example(Model):\n    def initialize(self):\n        self.parameters.declare('num_times', types=int)\n        self.parameters.declare('step_size', types=float)\n        self.parameters.declare('surface', types=dict)\n\n    def define(self):\n        num_times = self.parameters['num_times']\n        step_size = self.parameters['step_size']\n        surface = self.parameters['surface']\n        name = surface['name'] # str\n        symmetry = surface['symmetry'] # bool\n        mesh = surface['mesh'] # numpy array\n\n        # define runtime behavior...\n\n    surface = {\n        'name': 'wing',\n        'symmetry': False,\n        'mesh': mesh,\n    }\n\n    # compile using Simulator imported from back end...\n    sim = Simulator(\n        Example(\n            num_times=100,\n            step_size=0.1,\n            surface=surface,\n        ),\n    )\n")),(0,r.kt)("a",{id:"csdl.core.model.Model.define"}),(0,r.kt)("h3",{id:"define"},"define"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def define()\n")),(0,r.kt)("p",null,"User defined method to define runtime behavior.\nNote: the user never ",(0,r.kt)("em",{parentName:"p"},"calls")," this method. Only the ",(0,r.kt)("inlineCode",{parentName:"p"},"Simulator"),"\nclass constructor calls this method."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"class Example(Model):\n    def define(self):\n        self.create_input('x')\n        m = 5\n        b = 3\n        y = m*x + b\n        self.register_output('y', y)\n\n# compile using Simulator imported from back end...\nsim = Simulator(Example())\nsim['x'] = -3/5\nsim.run()\nprint(sim['y']) # expect 0\n")),(0,r.kt)("a",{id:"csdl.core.model.Model._redefine"}),(0,r.kt)("h3",{id:"_redefine"},"_","redefine"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _redefine(expose: List[str])\n")),(0,r.kt)("p",null,"Remove edges so that we can update the graph.\nThis is ",(0,r.kt)("em",{parentName:"p"},"only")," used when exposing intermediate variables for a\ncomposite residual."),(0,r.kt)("a",{id:"csdl.core.model.Model.print_var"}),(0,r.kt)("h3",{id:"print_var"},"print","_","var"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def print_var(var: Variable)\n")),(0,r.kt)("p",null,"Print ",(0,r.kt)("em",{parentName:"p"},"runtime")," value during execution. Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"print_var"),"\nshould only be used for debugging, as it does have a performance\nimpact. Note that Python's ",(0,r.kt)("inlineCode",{parentName:"p"},"print")," function will print the\nCSDL compile time ",(0,r.kt)("inlineCode",{parentName:"p"},"Variable")," object information, and will have\nno effect on run time execution."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"y = csdl.sin(x)\nprint(y) # will print compile time information about y\nself.print_var(y) # will print run time value of y\n")),(0,r.kt)("a",{id:"csdl.core.model.Model.add_objective"}),(0,r.kt)("h3",{id:"add_objective"},"add","_","objective"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def add_objective(name, ref=None, ref0=None, index=None, units=None, adder=None, scaler=None, parallel_deriv_color=None, cache_linear_solution=False)\n")),(0,r.kt)("p",null,"Declare the objective for the optimization problem. Objective\nmust be a scalar variable."),(0,r.kt)("a",{id:"csdl.core.model.Model.add_design_variable"}),(0,r.kt)("h3",{id:"add_design_variable"},"add","_","design","_","variable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def add_design_variable(name, lower=None, upper=None, ref=None, ref0=None, indices=None, adder=None, scaler=None, units=None, parallel_deriv_color=None, cache_linear_solution=False)\n")),(0,r.kt)("p",null,"Add a design variable to the optimization problem. The design\nvariable must be an ",(0,r.kt)("inlineCode",{parentName:"p"},"Input"),". This will signal to the optimizer\nthat it is responsible for updating the input variable."),(0,r.kt)("a",{id:"csdl.core.model.Model.add_constraint"}),(0,r.kt)("h3",{id:"add_constraint"},"add","_","constraint"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def add_constraint(name, lower=None, upper=None, equals=None, ref=None, ref0=None, adder=None, scaler=None, units=None, indices=None, linear=False, parallel_deriv_color=None, cache_linear_solution=False)\n")),(0,r.kt)("p",null,"Add a constraint to the optimization problem."),(0,r.kt)("a",{id:"csdl.core.model.Model.connect"}),(0,r.kt)("h3",{id:"connect"},"connect"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def connect(a: str, b: str)\n")),(0,r.kt)("a",{id:"csdl.core.model.Model.declare_variable"}),(0,r.kt)("h3",{id:"declare_variable"},"declare","_","variable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def declare_variable(name: str, val=1.0, shape=(1, ), src_indices=None, flat_src_indices=None, units=None, desc='', tags=None, shape_by_conn=False, copy_shape=None, distributed=None) -> DeclaredVariable\n")),(0,r.kt)("p",null,"Declare an input to use in an expression."),(0,r.kt)("p",null,"An input can be an output of a child ",(0,r.kt)("inlineCode",{parentName:"p"},"System"),". If the user\ndeclares an input that is computed by a child ",(0,r.kt)("inlineCode",{parentName:"p"},"System"),", then\nthe call to ",(0,r.kt)("inlineCode",{parentName:"p"},"self.declare_variable")," must appear after the call to\n",(0,r.kt)("inlineCode",{parentName:"p"},"self.add"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",null,"name: str\nName of variable in CSDL to be used as a local input that\ntakes a value from a parent model, child model, or\npreviously registered output within the model.\nshape: Tuple","[int]","\nShape of variable\nval: Number or ndarray\nDefault value for variable"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",null,"DocInput\nAn object to use in expressions"),(0,r.kt)("a",{id:"csdl.core.model.Model.create_input"}),(0,r.kt)("h3",{id:"create_input"},"create","_","input"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def create_input(name, val=1.0, shape=(1, ), units=None, desc='', tags=None, shape_by_conn=False, copy_shape=None, distributed=None) -> Input\n")),(0,r.kt)("p",null,"Create an input to the main model, whose value remains constant\nduring model evaluation."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",null,"name: str\nName of variable in CSDL\nshape: Tuple","[int]","\nShape of variable\nval: Number or ndarray\nValue for variable during first model evaluation"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",null,"Input\nAn object to use in expressions"),(0,r.kt)("a",{id:"csdl.core.model.Model.create_output"}),(0,r.kt)("h3",{id:"create_output"},"create","_","output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def create_output(name, val=1.0, shape=(1, ), units=None, res_units=None, desc='', lower=None, upper=None, ref=1.0, ref0=0.0, res_ref=1.0, tags=None, shape_by_conn=False, copy_shape=None, distributed=None) -> Concatenation\n")),(0,r.kt)("p",null,"Create a value that is computed explicitly, either through\nindexed assignment, or as a fixed point iteration."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"x = self.create_output('x', shape=(5,3,2))\nx[:, :, 0] = a\nx[:, :, 1] = b\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",null,"name: str\nName of variable in CSDL\nshape: Tuple","[int]","\nShape of variable"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",null,"Concatenation\nAn object to use in expressions"),(0,r.kt)("a",{id:"csdl.core.model.Model.register_output"}),(0,r.kt)("h3",{id:"register_output"},"register","_","output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def register_output(name: str, var: Output) -> Output\n")),(0,r.kt)("p",null,"Register ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," as an output of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Model"),".\nWhen adding subsystems, each of the submodel's inputs requires\na call to ",(0,r.kt)("inlineCode",{parentName:"p"},"register_output")," prior to the call to\n",(0,r.kt)("inlineCode",{parentName:"p"},"add"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name: str")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Name of variable in CSDL\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"var: Output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Variable that defines output\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Variable that defines output (same object as argument)\n")),(0,r.kt)("a",{id:"csdl.core.model.Model.add"}),(0,r.kt)("h3",{id:"add"},"add"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def add(submodel, name: str = '', promotes: List[str] = None, promotes_inputs: List[str] = None, promotes_outputs: List[str] = None)\n")),(0,r.kt)("p",null,"Add a submodel to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Model"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"self.add")," call must be preceded by a call to\n",(0,r.kt)("inlineCode",{parentName:"p"},"self.register_output")," for each of the submodel's inputs,\nand followed by ",(0,r.kt)("inlineCode",{parentName:"p"},"self.declare_variable")," for each of the\nsubmodel's outputs."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",null,"name: str\nName of submodel\nsubmodel: System\nSubsystem to add to ",(0,r.kt)("inlineCode",{parentName:"p"},"Model"),"\npromotes: List\nVariables to promote\npromotes_inputs: List\nInputs to promote\npromotes_outputs: List\nOutputs to promote"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",null,"System\nSubsystem to add to ",(0,r.kt)("inlineCode",{parentName:"p"},"Model")),(0,r.kt)("a",{id:"csdl.core.model.Model._bracketed_search"}),(0,r.kt)("h3",{id:"_bracketed_search"},"_","bracketed","_","search"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _bracketed_search(implicit_metadata: Dict[str, dict], *arguments: Variable, *, states: List[str], residuals: List[str], model, brackets: Dict[str, Tuple[Union[int, float, np.ndarray],\n                                  Union[int, float, np.ndarray]]], expose: List[str] = [], maxiter: int = 100)\n")),(0,r.kt)("p",null,"Create an implicit operation whose residuals are defined by a\n",(0,r.kt)("inlineCode",{parentName:"p"},"Model"),".\nAn implicit operation is an operation that solves an equation\n",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"f"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("mi",{parentName:"mrow"},"y"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mn",{parentName:"mrow"},"0")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"f(x,y)=0")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"0")))))," for ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"y")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"y")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.625em",verticalAlign:"-0.19444em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y"))))),", given some value of ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"x")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"x")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"))))),".\nCSDL solves ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"f"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("mi",{parentName:"mrow"},"y"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mn",{parentName:"mrow"},"0")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"f(x,y)=0")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"0")))))," by defining a residual ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"r"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mi",{parentName:"mrow"},"f"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("mi",{parentName:"mrow"},"y"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"r=f(x,y)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")")))))," and\nupdating ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"y")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"y")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.625em",verticalAlign:"-0.19444em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y")))))," until ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"r")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"r")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r")))))," converges to zero."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"arguments: List[Variable]")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"List of variables to use as arguments for the implicit\noperation.\nVariables must have the same name as a declared variable\nwithin the ",(0,r.kt)("inlineCode",{parentName:"p"},"model"),"'s class definition.")),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The declared variable ",(0,r.kt)("em",{parentName:"p"},"must")," be declared within ",(0,r.kt)("inlineCode",{parentName:"p"},"model"),"\n",(0,r.kt)("em",{parentName:"p"},"and not")," promoted from a child submodel."))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"states: List[str]")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Names of states to compute using the implicit operation.\nThe order of the names of these states corresponds to the\norder of the output variables returned by\n",(0,r.kt)("inlineCode",{parentName:"p"},"implicit_operation"),".\nThe order of the names in ",(0,r.kt)("inlineCode",{parentName:"p"},"states")," must also match the order\nof the names of the residuals associated with each state in\n",(0,r.kt)("inlineCode",{parentName:"p"},"residuals"),".")),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The declared variable ",(0,r.kt)("em",{parentName:"p"},"must")," be declared within ",(0,r.kt)("inlineCode",{parentName:"p"},"model"),"\n",(0,r.kt)("em",{parentName:"p"},"and not")," promoted from a child submodel."))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"residuals: List[str]")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The residuals associated with the states.\nThe name of each residual must match the name of a\nregistered output in ",(0,r.kt)("inlineCode",{parentName:"p"},"model"),".")),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The registered output ",(0,r.kt)("em",{parentName:"p"},"must")," be registered within ",(0,r.kt)("inlineCode",{parentName:"p"},"model"),"\n",(0,r.kt)("em",{parentName:"p"},"and not")," promoted from a child submodel."))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"model: Model")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," object to use to define the residuals.\nResiduals may be defined via functional composition and/or\nhierarchical composition.")),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("em",{parentName:"p"},"Any")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," object may be used to define residuals for an\nimplicit operation"))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nonlinear_solver: NonlinearSolver")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The nonlinear solver to use to converge the residuals")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"linear_solver: LinearSolver")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The linear solver to use to solve the linear system")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expose: List[str]")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"List of intermediate variables inside ",(0,r.kt)("inlineCode",{parentName:"p"},"model")," that are\nrequired for computing residuals to which it is desirable\nto have access outside of the implicit operation.\nFor example, if a trajectory is computed using time marching\nand a residual is computed from the final state of the\ntrajectory, it may be desirable to plot that trajectory\nafter the conclusion of a simulation, e.g. after an\niteration during an optimization process.")),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The variable names in ",(0,r.kt)("inlineCode",{parentName:"p"},"expose")," may be any name within the\nmodel hierarchy defined in ",(0,r.kt)("inlineCode",{parentName:"p"},"model"),", but the variable names\nin ",(0,r.kt)("inlineCode",{parentName:"p"},"expose")," are neither declared variables, nor registered\noutputs in ",(0,r.kt)("inlineCode",{parentName:"p"},"model"),", although they may be declared\nvariables/registered outputs in a submodel (i.e. they are\nneither states nor residuals in the, implicit operation)."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Tuple[Ouput]")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Variables to use in this ",(0,r.kt)("inlineCode",{parentName:"p"},"Model"),".\nThe variables are named according to ",(0,r.kt)("inlineCode",{parentName:"p"},"states")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"expose"),",\nand are returned in the same order in which they are\ndeclared.\nFor example, if ",(0,r.kt)("inlineCode",{parentName:"p"},"states=['a', 'b', 'c']")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"expose=['d', 'e', 'f']"),", then the outputs\n",(0,r.kt)("inlineCode",{parentName:"p"},"a, b, c, d, e, f")," in\n",(0,r.kt)("inlineCode",{parentName:"p"},"a, b, c, d, e, f = self.implcit_output(...)"),"\nwill be named\n",(0,r.kt)("inlineCode",{parentName:"p"},"'a', 'b', 'c', 'd', 'e', 'f'"),", respectively.\nThis enables use of exposed intermediate variables (in\naddition to the states computed by converging the\nresiduals) from ",(0,r.kt)("inlineCode",{parentName:"p"},"model")," in this ",(0,r.kt)("inlineCode",{parentName:"p"},"Model"),".\nUnused outputs will be ignored, so\n",(0,r.kt)("inlineCode",{parentName:"p"},"a, b, c = self.implcit_output(...)"),"\nwill make the variables declared in ",(0,r.kt)("inlineCode",{parentName:"p"},"expose")," available for\nrecording/analysis and promotion/connection, but they will\nbe unused by this ",(0,r.kt)("inlineCode",{parentName:"p"},"Model"),".\nNote that these variables are already registered as outputs\nin this ",(0,r.kt)("inlineCode",{parentName:"p"},"Model"),", so there is no need to call\n",(0,r.kt)("inlineCode",{parentName:"p"},"Model.register_output")," for any of these variables.")),(0,r.kt)("a",{id:"csdl.core.model.Model._implicit_operation"}),(0,r.kt)("h3",{id:"_implicit_operation"},"_","implicit","_","operation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _implicit_operation(implicit_metadata: Dict[str, dict], *arguments: Variable, *, states: List[str], residuals: List[str], model, nonlinear_solver: NonlinearSolver, linear_solver: LinearSolver = None, expose: List[str] = [], defaults: Dict[str, Union[int, float, np.ndarray]] = dict())\n")),(0,r.kt)("p",null,"Create an implicit operation whose residuals are defined by a\n",(0,r.kt)("inlineCode",{parentName:"p"},"Model"),".\nAn implicit operation is an operation that solves an equation\n",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"f"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("mi",{parentName:"mrow"},"y"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mn",{parentName:"mrow"},"0")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"f(x,y)=0")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"0")))))," for ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"y")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"y")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.625em",verticalAlign:"-0.19444em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y"))))),", given some value of ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"x")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"x")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"))))),".\nCSDL solves ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"f"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("mi",{parentName:"mrow"},"y"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mn",{parentName:"mrow"},"0")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"f(x,y)=0")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"0")))))," by defining a residual ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"r"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mi",{parentName:"mrow"},"f"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("mi",{parentName:"mrow"},"y"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"r=f(x,y)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")")))))," and\nupdating ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"y")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"y")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.625em",verticalAlign:"-0.19444em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y")))))," until ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"r")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"r")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r")))))," converges to zero."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"arguments: List[Variable]")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"List of variables to use as arguments for the implicit\noperation.\nVariables must have the same name as a declared variable\nwithin the `model`'s class definition.\n\n:::note\nThe declared variable _must_ be declared within `model`\n_and not_ promoted from a child submodel.\n:::\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"states: List[str]")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Names of states to compute using the implicit operation.\nThe order of the names of these states corresponds to the\norder of the output variables returned by\n`implicit_operation`.\nThe order of the names in `states` must also match the order\nof the names of the residuals associated with each state in\n`residuals`.\n\n:::note\nThe declared variable _must_ be declared within `model`\n_and not_ promoted from a child submodel.\n:::\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"residuals: List[str]")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"The residuals associated with the states.\nThe name of each residual must match the name of a\nregistered output in `model`.\n\n:::note\nThe registered output _must_ be registered within `model`\n_and not_ promoted from a child submodel.\n:::\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"model: Model")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"The `Model` object to use to define the residuals.\nResiduals may be defined via functional composition and/or\nhierarchical composition.\n\n:::note\n_Any_ `Model` object may be used to define residuals for an\nimplicit operation\n:::\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nonlinear_solver: NonlinearSolver")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"The nonlinear solver to use to converge the residuals\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"linear_solver: LinearSolver")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"The linear solver to use to solve the linear system\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expose: List[str]")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"List of intermediate variables inside `model` that are\nrequired for computing residuals to which it is desirable\nto have access outside of the implicit operation.\n\nFor example, if a trajectory is computed using time marching\nand a residual is computed from the final state of the\ntrajectory, it may be desirable to plot that trajectory\nafter the conclusion of a simulation, e.g. after an\niteration during an optimization process.\n\n:::note\nThe variable names in `expose` may be any name within the\nmodel hierarchy defined in `model`, but the variable names\nin `expose` are neither declared variables, nor registered\noutputs in `model`, although they may be declared\nvariables/registered outputs in a submodel (i.e. they are\nneither states nor residuals in the, implicit operation).\n:::\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Tuple[Ouput]")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Variables to use in this `Model`.\nThe variables are named according to `states` and `expose`,\nand are returned in the same order in which they are\ndeclared.\nFor example, if `states=['a', 'b', 'c']` and\n`expose=['d', 'e', 'f']`, then the outputs\n`a, b, c, d, e, f` in\n`a, b, c, d, e, f = self.implcit_output(...)`\nwill be named\n`'a', 'b', 'c', 'd', 'e', 'f'`, respectively.\nThis enables use of exposed intermediate variables (in\naddition to the states computed by converging the\nresiduals) from `model` in this `Model`.\nUnused outputs will be ignored, so\n`a, b, c = self.implcit_output(...)`\nwill make the variables declared in `expose` available for\nrecording/analysis and promotion/connection, but they will\nbe unused by this `Model`.\nNote that these variables are already registered as outputs\nin this `Model`, so there is no need to call\n`Model.register_output` for any of these variables.\n")),(0,r.kt)("a",{id:"csdl.core.model.Model._something"}),(0,r.kt)("h3",{id:"_something"},"_","something"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _something(model, arguments, states, residuals, expose: List[str] = [])\n")),(0,r.kt)("a",{id:"csdl.core.model.Model._return_implicit_outputs"}),(0,r.kt)("h3",{id:"_return_implicit_outputs"},"_","return","_","implicit","_","outputs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _return_implicit_outputs(model, op, arguments, states, residuals, expose, implicit_metadata)\n")),(0,r.kt)("a",{id:"csdl.core.model.Model.create_implicit_operation"}),(0,r.kt)("h3",{id:"create_implicit_operation"},"create","_","implicit","_","operation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def create_implicit_operation(model)\n")),(0,r.kt)("a",{id:"csdl.core.model.Model.__enter__"}),(0,r.kt)("h3",{id:"__enter__"},"_","_","enter","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __enter__()\n")),(0,r.kt)("a",{id:"csdl.core.model.Model.__exit__"}),(0,r.kt)("h3",{id:"__exit__"},"_","_","exit","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __exit__(type, value, traceback)\n")),(0,r.kt)("a",{id:"csdl.core.model.Model.create_submodel"}),(0,r.kt)("h3",{id:"create_submodel"},"create","_","submodel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@contextmanager\ndef create_submodel(name: str)\n")),(0,r.kt)("p",null,"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," object and add as a submodel, promoting all\ninputs and outputs.\nFor use in ",(0,r.kt)("inlineCode",{parentName:"p"},"with")," contexts.\nNOTE: Only use if planning to promote all varaibales within\nchild ",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," object."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",null,"name: str\nName of new child ",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," object"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",null,"Model\nChild ",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," object whose variables are all promoted"),(0,r.kt)("a",{id:"csdl.core.model.Model.visualize_sparsity"}),(0,r.kt)("h3",{id:"visualize_sparsity"},"visualize","_","sparsity"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def visualize_sparsity()\n")),(0,r.kt)("p",null,"Visualize the sparsity pattern of jacobian for this model"),(0,r.kt)("a",{id:"csdl.core.model.Model.visualize_graph"}),(0,r.kt)("h3",{id:"visualize_graph"},"visualize","_","graph"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def visualize_graph()\n")),(0,r.kt)("a",{id:"csdl.core.model.add_diag_implicit"}),(0,r.kt)("h3",{id:"add_diag_implicit"},"add","_","diag","_","implicit"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def add_diag_implicit(A, variables, implicit_outputs, indices=dict(), implicit_nodes=dict(), p=0, indent='')\n")),(0,r.kt)("a",{id:"csdl.core.model.add_off_diag_implicit"}),(0,r.kt)("h3",{id:"add_off_diag_implicit"},"add","_","off","_","diag","_","implicit"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def add_off_diag_implicit(A, indices, implicit_nodes)\n")),(0,r.kt)("a",{id:"csdl.core.model.add_diag"}),(0,r.kt)("h3",{id:"add_diag"},"add","_","diag"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def add_diag(A, nodes, indices=dict(), implicit_nodes=dict(), p=0, indent='')\n")),(0,r.kt)("a",{id:"csdl.core.model.add_off_diag"}),(0,r.kt)("h3",{id:"add_off_diag"},"add","_","off","_","diag"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def add_off_diag(A, model, indices)\n")),(0,r.kt)("a",{id:"csdl.core.simulator_base"}),(0,r.kt)("h1",{id:"csdlcoresimulator_base"},"csdl.core.simulator","_","base"),(0,r.kt)("a",{id:"csdl.core.simulator_base._ReprClass"}),(0,r.kt)("h2",{id:"_reprclass-objects"},"_","ReprClass Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class _ReprClass(object)\n")),(0,r.kt)("p",null,"Class for defining objects with a simple constant string ",(0,r.kt)("strong",{parentName:"p"},"repr"),"."),(0,r.kt)("p",null,"This is useful for constants used in arg lists when you want them to appear in\nautomatically generated source documentation as a certain string instead of python's\ndefault representation."),(0,r.kt)("a",{id:"csdl.core.simulator_base._ReprClass.__init__"}),(0,r.kt)("h3",{id:"__init__-2"},"_","_","init","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(repr_string)\n")),(0,r.kt)("p",null,"Inititialize the ",(0,r.kt)("strong",{parentName:"p"},"repr")," string."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",null,"repr_string : str\nThe string to be returned by ",(0,r.kt)("strong",{parentName:"p"},"repr")),(0,r.kt)("a",{id:"csdl.core.simulator_base._ReprClass.__repr__"}),(0,r.kt)("h3",{id:"__repr__"},"_","_","repr","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __repr__()\n")),(0,r.kt)("p",null,"Return our _repr_string."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",null,"str\nWhatever string we were initialized with."),(0,r.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase"}),(0,r.kt)("h2",{id:"simulatorbase-objects"},"SimulatorBase Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class SimulatorBase()\n")),(0,r.kt)("p",null,"A class that can be used as a base class for the ",(0,r.kt)("inlineCode",{parentName:"p"},"Simulator")," class\nthat a CSDL compiler back end would provide.\nThis class is only here so that CSDL users and CSDL compiler back end\ndevelopers have API documentation.\nCSDL users are not to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"SimulatorBase")," class provided by\n",(0,r.kt)("inlineCode",{parentName:"p"},"csdl"),", only the ",(0,r.kt)("inlineCode",{parentName:"p"},"Simulator")," class provided by the CSDL compiler\nback end of choice."),(0,r.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.__init__"}),(0,r.kt)("h3",{id:"__init__-3"},"_","_","init","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(model, reorder=False)\n")),(0,r.kt)("p",null,"Constructor."),(0,r.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.__getitem__"}),(0,r.kt)("h3",{id:"__getitem__"},"_","_","getitem","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __getitem__(key)\n")),(0,r.kt)("p",null,"Method to get variable values before or after a simulation run"),(0,r.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.__setitem__"}),(0,r.kt)("h3",{id:"__setitem__"},"_","_","setitem","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __setitem__(key, val)\n")),(0,r.kt)("p",null,"Method to set values for variables by name"),(0,r.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.run"}),(0,r.kt)("h3",{id:"run"},"run"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def run()\n")),(0,r.kt)("p",null,"Method to run a simulation once. This method should be\nimplemented so that it can be called repeatedly to solve an\noptimization problem."),(0,r.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.compute_total_derivatives"}),(0,r.kt)("h3",{id:"compute_total_derivatives"},"compute","_","total","_","derivatives"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def compute_total_derivatives() -> OrderedDict\n")),(0,r.kt)("p",null,"Method to compute total derivatives for use by an optimizer"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"`OrderedDict[str, Any]`\n")),(0,r.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.compute_exact_hessian"}),(0,r.kt)("h3",{id:"compute_exact_hessian"},"compute","_","exact","_","hessian"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def compute_exact_hessian()\n")),(0,r.kt)("p",null,"Method to compute exact Hessian"),(0,r.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.check_partials"}),(0,r.kt)("h3",{id:"check_partials"},"check","_","partials"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def check_partials()\n")),(0,r.kt)("p",null,"Method to compute the error for all partial derivatives of all\noperations within the model."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",null,"An object that is compatible with ",(0,r.kt)("inlineCode",{parentName:"p"},"assert_check_partials")),(0,r.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.assert_check_partials"}),(0,r.kt)("h3",{id:"assert_check_partials"},"assert","_","check","_","partials"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def assert_check_partials(result, atol=1e-8, rtol=1e-8)\n")),(0,r.kt)("p",null,"Method to check that the partial derivatives of all operations\nare within a specified tolerance."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"result"),": Return type of ",(0,r.kt)("inlineCode",{parentName:"p"},"check_partials")),(0,r.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.visualize_implementation"}),(0,r.kt)("h3",{id:"visualize_implementation"},"visualize","_","implementation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def visualize_implementation()\n")),(0,r.kt)("p",null,"A method for the back end to provide its own visualization of\nthe model."),(0,r.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.objective"}),(0,r.kt)("h3",{id:"objective"},"objective"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def objective() -> Dict[str, Any]\n")),(0,r.kt)("p",null,"Method to provide optimizer with objective"),(0,r.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.design_variables"}),(0,r.kt)("h3",{id:"design_variables"},"design","_","variables"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def design_variables() -> OrderedDict\n")),(0,r.kt)("p",null,"Method to provide optimizer with design variables\n",(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"`OrderedDict[str, Dict[str, Any]]`\n")),(0,r.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.constraints"}),(0,r.kt)("h3",{id:"constraints"},"constraints"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def constraints() -> OrderedDict\n")),(0,r.kt)("p",null,"Method to provide optimizer with constraints"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"`OrderedDict[str, Dict[str, Any]]`\n")),(0,r.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.implicit_outputs"}),(0,r.kt)("h3",{id:"implicit_outputs"},"implicit","_","outputs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def implicit_outputs()\n")),(0,r.kt)("p",null,"Method to provide optimizer with implicit_outputs"),(0,r.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.residuals"}),(0,r.kt)("h3",{id:"residuals"},"residuals"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def residuals()\n")),(0,r.kt)("p",null,"Method to provide optimizer with residuals"),(0,r.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.objective_gradient"}),(0,r.kt)("h3",{id:"objective_gradient"},"objective","_","gradient"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def objective_gradient() -> OrderedDict\n")),(0,r.kt)("p",null,"Method to provide optimizer with total derivative of objective\nwith respect to design variables"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"`OrderedDict[Tuple[str, str], Any]`\n")),(0,r.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.constraint_jacobian"}),(0,r.kt)("h3",{id:"constraint_jacobian"},"constraint","_","jacobian"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def constraint_jacobian() -> OrderedDict\n")),(0,r.kt)("p",null,"Method to provide optimizer with total derivatives of\nconstraints with respect to design variables"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"`OrderedDict[Tuple[str, str], Any]`\n")),(0,r.kt)("a",{id:"csdl.core.simulator_base.SimulatorBase.residuals_jacobian"}),(0,r.kt)("h3",{id:"residuals_jacobian"},"residuals","_","jacobian"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def residuals_jacobian()\n")),(0,r.kt)("p",null,"Method to provide optimizer with total derivatives of\nresiduals with respect to design variables"),(0,r.kt)("a",{id:"csdl.core.custom_explicit_operation"}),(0,r.kt)("h1",{id:"csdlcorecustom_explicit_operation"},"csdl.core.custom","_","explicit","_","operation"),(0,r.kt)("a",{id:"csdl.core.custom_explicit_operation.CustomExplicitOperation"}),(0,r.kt)("h2",{id:"customexplicitoperation-objects"},"CustomExplicitOperation Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class CustomExplicitOperation(CustomOperation)\n")),(0,r.kt)("a",{id:"csdl.core.custom_explicit_operation.CustomExplicitOperation.compute"}),(0,r.kt)("h3",{id:"compute"},"compute"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def compute(inputs, outputs)\n")),(0,r.kt)("p",null,"Define outputs as an explicit function of the inputs"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"def compute(self, inputs, outputs):\n    outputs['L'] = 1/2 * inputs['Cl'] * inputs['rho'] * inputs['V']**2 * inputs['S']\n    outputs['D'] = 1/2 * inputs['Cd'] * inputs['rho'] * inputs['V']**2 * inputs['S']\n")),(0,r.kt)("a",{id:"csdl.core.custom_explicit_operation.CustomExplicitOperation.compute_derivatives"}),(0,r.kt)("h3",{id:"compute_derivatives"},"compute","_","derivatives"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def compute_derivatives(inputs, derivatives)\n")),(0,r.kt)("p",null,"User defined method to compute partial derivatives for this\noperation"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"def compute(self, inputs, outputs):\n    outputs['L'] = 1/2 * inputs['Cl'] * inputs['rho'] * inputs['V']**2 * inputs['S']\n    outputs['D'] = 1/2 * inputs['Cd'] * inputs['rho'] * inputs['V']**2 * inputs['S']\n\ndef compute_derivatives(self, inputs, derivatives):\n    derivatives['L', 'Cl'] = 1/2 * inputs['rho'] * inputs['V']**2 * inputs['S']\n    derivatives['L', 'rho'] = 1/2 * inputs['Cl'] * inputs['V']**2 * inputs['S']\n    derivatives['L', 'V'] = inputs['Cl'] * inputs['rho'] * inputs['V'] * inputs['S']\n    derivatives['L', 'S'] = 1/2 * inputs['Cl'] * inputs['rho'] * inputs['V']**2\n\n    derivatives['D', 'Cd'] = 1/2 * inputs['rho'] * inputs['V']**2 * inputs['S']\n    derivatives['D', 'rho'] = 1/2 * inputs['Cd'] * inputs['V']**2 * inputs['S']\n    derivatives['D', 'V'] = inputs['Cd'] * inputs['rho'] * inputs['V'] * inputs['S']\n    derivatives['D', 'S'] = 1/2 * inputs['Cd'] * inputs['rho'] * inputs['V']**2\n")),(0,r.kt)("a",{id:"csdl.core.custom_explicit_operation.CustomExplicitOperation.compute_jacvec_product"}),(0,r.kt)("h3",{id:"compute_jacvec_product"},"compute","_","jacvec","_","product"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def compute_jacvec_product(inputs, d_inputs, d_outputs, mode)\n")),(0,r.kt)("p",null,"[Optional]"," Implement partial derivatives by computing a\nmatrix-vector product"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"def compute(self, inputs, outputs):\n    outputs['area'] = inputs['length'] * inputs['width']\n\ndef compute_jacvec_product(self, inputs, d_inputs, d_outputs, mode):\n    if mode == 'fwd':\n        if 'area' in d_outputs:\n            if 'length' in d_inputs:\n                d_outputs['area'] += inputs['width'] * d_inputs['length']\n            if 'width' in d_inputs:\n                d_outputs['area'] += inputs['length'] * d_inputs['width']\n    elif mode == 'rev':\n        if 'area' in d_outputs:\n            if 'length' in d_inputs:\n                d_inputs['length'] += inputs['width'] * d_outputs['area']\n            if 'width' in d_inputs:\n                d_inputs['width'] += inputs['length'] * d_outputs['area']\n")),(0,r.kt)("a",{id:"csdl.core.custom_implicit_operation"}),(0,r.kt)("h1",{id:"csdlcorecustom_implicit_operation"},"csdl.core.custom","_","implicit","_","operation"),(0,r.kt)("a",{id:"csdl.core.custom_implicit_operation.CustomImplicitOperation"}),(0,r.kt)("h2",{id:"customimplicitoperation-objects"},"CustomImplicitOperation Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class CustomImplicitOperation(CustomOperation)\n")),(0,r.kt)("a",{id:"csdl.core.custom_implicit_operation.CustomImplicitOperation.__init__"}),(0,r.kt)("h3",{id:"__init__-4"},"_","_","init","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(*args, **kwargs)\n")),(0,r.kt)("a",{id:"csdl.core.custom_implicit_operation.CustomImplicitOperation.evaluate_residuals"}),(0,r.kt)("h3",{id:"evaluate_residuals"},"evaluate","_","residuals"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def evaluate_residuals(inputs, outputs, residuals)\n")),(0,r.kt)("p",null,"User defined method to evaluate residuals"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Example")),(0,r.kt)("p",null,".. code-block:: python"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"def evaluate_residuals(self, inputs, outputs, residuals):\n    x = outputs['x']\n    a = inputs['a']\n    b = inputs['b']\n    c = inputs['c']\n    residuals['x'] = a * x**2 + b * x + c\n")),(0,r.kt)("a",{id:"csdl.core.custom_implicit_operation.CustomImplicitOperation.compute_derivatives"}),(0,r.kt)("h3",{id:"compute_derivatives-1"},"compute","_","derivatives"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def compute_derivatives(inputs, outputs, derivatives)\n")),(0,r.kt)("p",null,"[Optional]"," User defined method to evaluate exact derivatives of\nresiduals wrt inputs and outputs"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Example")),(0,r.kt)("p",null,".. code-block:: python"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"def compute_derivatives(self, inputs, outputs, derivatives):\n    a = inputs['a']\n    b = inputs['b']\n    x = outputs['x']\n\n    derivatives['x', 'a'] = x**2\n    derivatives['x', 'b'] = x\n    derivatives['x', 'c'] = 1.0\n    derivatives['x', 'x'] = 2 * a * x + b\n\n    # only necessary if implementing `apply_inverse_jacobian`\n    self.inv_jac = 1.0 / (2 * a * x + b)\n")),(0,r.kt)("a",{id:"csdl.core.custom_implicit_operation.CustomImplicitOperation.solve_residual_equations"}),(0,r.kt)("h3",{id:"solve_residual_equations"},"solve","_","residual","_","equations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def solve_residual_equations(inputs, outputs)\n")),(0,r.kt)("p",null,"[Optional]"," User defined method to solve residual equations,\ncomputing the outputs given the inputs. Define this method to\nimplement a custom solver. Assigning a nonlinear solver will\ncause ",(0,r.kt)("inlineCode",{parentName:"p"},"evaluate_residual_equations")," to run instead."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Example")),(0,r.kt)("p",null,".. code-block:: python"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"def solve_residual_equations(self, inputs, outputs):\n    a = inputs['a']\n    b = inputs['b']\n    c = inputs['c']\n    outputs['x'] = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n")),(0,r.kt)("a",{id:"csdl.core.custom_implicit_operation.CustomImplicitOperation.apply_inverse_jacobian"}),(0,r.kt)("h3",{id:"apply_inverse_jacobian"},"apply","_","inverse","_","jacobian"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def apply_inverse_jacobian(d_outputs, d_residuals, mode)\n")),(0,r.kt)("p",null,"[Optional]"," Solve linear system. Invoked when solving coupled\nlinear system; i.e. when solving Newton system to update\nimplicit state variables, and when computing total derivatives"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Example")),(0,r.kt)("p",null,".. code-block:: python"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# using self.inv_jac defined in `compute_derivatives` example\ndef apply_inverse_jacobian( self, d_outputs, d_residuals, mode)\n    if mode == 'fwd':\n        d_outputs['x'] = self.inv_jac * d_residuals['x']\n    elif mode == 'rev':\n        d_residuals['x'] = self.inv_jac * d_outputs['x']\n")),(0,r.kt)("a",{id:"csdl.core.custom_implicit_operation.CustomImplicitOperation.compute_jacvec_product"}),(0,r.kt)("h3",{id:"compute_jacvec_product-1"},"compute","_","jacvec","_","product"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def compute_jacvec_product(inputs, outputs, d_inputs, d_outputs, d_residuals, mode)\n")),(0,r.kt)("p",null,"[Optional]"," Implement partial derivatives by computing a\nmatrix-vector product."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Example")),(0,r.kt)("p",null,".. code-block:: python"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"def compute_jacvec_product(\n        self,\n        inputs,\n        outputs,\n        d_inputs,\n        d_outputs,\n        d_residuals,\n        mode,\n    ):\n        a = inputs['a']\n        b = inputs['b']\n        c = inputs['c']\n        x = outputs['x']\n        if mode == 'fwd':\n            if 'x' in d_residuals:\n                if 'x' in d_outputs:\n                    d_residuals['x'] += (2 * a * x + b) * d_outputs['x']\n                if 'a' in d_inputs:\n                    d_residuals['x'] += x ** 2 * d_inputs['a']\n                if 'b' in d_inputs:\n                    d_residuals['x'] += x * d_inputs['b']\n                if 'c' in d_inputs:\n                    d_residuals['x'] += d_inputs['c']\n        elif mode == 'rev':\n            if 'x' in d_residuals:\n                if 'x' in d_outputs:\n                    d_outputs['x'] += (2 * a * x + b) * d_residuals['x']\n                if 'a' in d_inputs:\n                    d_inputs['a'] += x ** 2 * d_residuals['x']\n                if 'b' in d_inputs:\n                    d_inputs['b'] += x * d_residuals['x']\n                if 'c' in d_inputs:\n                    d_inputs['c'] += d_residuals['x']\n")),(0,r.kt)("a",{id:"csdl.core.node"}),(0,r.kt)("h1",{id:"csdlcorenode"},"csdl.core.node"),(0,r.kt)("a",{id:"csdl.core.node.slice_to_tuple"}),(0,r.kt)("h3",{id:"slice_to_tuple"},"slice","_","to","_","tuple"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def slice_to_tuple(key: slice, size: int) -> tuple\n")),(0,r.kt)("a",{id:"csdl.core.node.Node"}),(0,r.kt)("h2",{id:"node-objects"},"Node Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Node()\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Node")," class is a base type for nodes in a Directed\nAcyclic Graph (DAG) that represents the computation to be performed\nduring model evaluation."),(0,r.kt)("a",{id:"csdl.core.node.Node.__init__"}),(0,r.kt)("h3",{id:"__init__-5"},"_","_","init","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(*args, **kwargs)\n")),(0,r.kt)("a",{id:"csdl.core.node.Node.__iadd__"}),(0,r.kt)("h3",{id:"__iadd__"},"_","_","iadd","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __iadd__(other)\n")),(0,r.kt)("a",{id:"csdl.core.node.Node.__iand__"}),(0,r.kt)("h3",{id:"__iand__"},"_","_","iand","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __iand__(other)\n")),(0,r.kt)("a",{id:"csdl.core.node.Node.__idiv__"}),(0,r.kt)("h3",{id:"__idiv__"},"_","_","idiv","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __idiv__(other)\n")),(0,r.kt)("a",{id:"csdl.core.node.Node.__ifloordiv__"}),(0,r.kt)("h3",{id:"__ifloordiv__"},"_","_","ifloordiv","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __ifloordiv__(other)\n")),(0,r.kt)("a",{id:"csdl.core.node.Node.__ilshift__"}),(0,r.kt)("h3",{id:"__ilshift__"},"_","_","ilshift","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __ilshift__(other)\n")),(0,r.kt)("a",{id:"csdl.core.node.Node.__imod__"}),(0,r.kt)("h3",{id:"__imod__"},"_","_","imod","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __imod__(other)\n")),(0,r.kt)("a",{id:"csdl.core.node.Node.__imul__"}),(0,r.kt)("h3",{id:"__imul__"},"_","_","imul","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __imul__(other)\n")),(0,r.kt)("a",{id:"csdl.core.node.Node.__ior__"}),(0,r.kt)("h3",{id:"__ior__"},"_","_","ior","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __ior__(other)\n")),(0,r.kt)("a",{id:"csdl.core.node.Node.__ipow__"}),(0,r.kt)("h3",{id:"__ipow__"},"_","_","ipow","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __ipow__(other)\n")),(0,r.kt)("a",{id:"csdl.core.node.Node.__irshift__"}),(0,r.kt)("h3",{id:"__irshift__"},"_","_","irshift","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __irshift__(other)\n")),(0,r.kt)("a",{id:"csdl.core.node.Node.__isub__"}),(0,r.kt)("h3",{id:"__isub__"},"_","_","isub","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __isub__(other)\n")),(0,r.kt)("a",{id:"csdl.core.node.Node.__ixor__"}),(0,r.kt)("h3",{id:"__ixor__"},"_","_","ixor","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __ixor__(other)\n")),(0,r.kt)("a",{id:"csdl.core.node.Node.add_fwd_edges"}),(0,r.kt)("h3",{id:"add_fwd_edges"},"add","_","fwd","_","edges"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def add_fwd_edges()\n")),(0,r.kt)("a",{id:"csdl.core.node.Node.remove_fwd_edges"}),(0,r.kt)("h3",{id:"remove_fwd_edges"},"remove","_","fwd","_","edges"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def remove_fwd_edges()\n")),(0,r.kt)("p",null,"Remove fwd edges so that we can update the graph.\nThis is ",(0,r.kt)("em",{parentName:"p"},"only")," used when exposing intermediate variables for a\ncomposite residual."),(0,r.kt)("a",{id:"csdl.core.node.Node.remove_dependencies"}),(0,r.kt)("h3",{id:"remove_dependencies"},"remove","_","dependencies"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def remove_dependencies()\n")),(0,r.kt)("p",null,"Remove bwd edges so that we can update the graph.\nThis is ",(0,r.kt)("em",{parentName:"p"},"only")," used when exposing intermediate variables for a\ncomposite residual."),(0,r.kt)("a",{id:"csdl.core.node.Node.add_dependent_node"}),(0,r.kt)("h3",{id:"add_dependent_node"},"add","_","dependent","_","node"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def add_dependent_node(dependent)\n")),(0,r.kt)("a",{id:"csdl.core.node.Node.register_nodes"}),(0,r.kt)("h3",{id:"register_nodes"},"register","_","nodes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def register_nodes(nodes: dict)\n")),(0,r.kt)("p",null,"Register all nodes in DAG."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",null,"nodes: dict","[Variable]","\nDictionary of nodes registered so far"),(0,r.kt)("a",{id:"csdl.core.node.Node.incr_times_visited"}),(0,r.kt)("h3",{id:"incr_times_visited"},"incr","_","times","_","visited"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def incr_times_visited()\n")),(0,r.kt)("p",null,"Increment number of times a node is visited during ",(0,r.kt)("inlineCode",{parentName:"p"},"topological_sort"),".\nThis is necessary for ",(0,r.kt)("inlineCode",{parentName:"p"},"topological_sort")," to determine\nexecution order for expressions."),(0,r.kt)("a",{id:"csdl.core.node.Node.get_dependency_index"}),(0,r.kt)("h3",{id:"get_dependency_index"},"get","_","dependency","_","index"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_dependency_index(candidate) -> Optional[int]\n")),(0,r.kt)("p",null,"Get index of dependency in ",(0,r.kt)("inlineCode",{parentName:"p"},"self.dependencies"),". Used for\nremoving indirect dependencies that woud otherwise affect the\ncost of branches in the DAG, which would affect execution order,\neven with the sme constraints on execution order."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",null,"candidate: Variable\nThe candidate dependency node"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",null,"Optional","[int]","\nIf ",(0,r.kt)("inlineCode",{parentName:"p"},"dependency")," is a dependency of ",(0,r.kt)("inlineCode",{parentName:"p"},"self"),", then the index of\n",(0,r.kt)("inlineCode",{parentName:"p"},"dependency")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"self.dependencies")," is returned. Otherwise,\n",(0,r.kt)("inlineCode",{parentName:"p"},"None")," is returned."),(0,r.kt)("a",{id:"csdl.core.node.Node.remove_dependency_by_index"}),(0,r.kt)("h3",{id:"remove_dependency_by_index"},"remove","_","dependency","_","by","_","index"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def remove_dependency_by_index(index)\n")),(0,r.kt)("p",null,"Remove dependency node, given its index. does nothing if\n",(0,r.kt)("inlineCode",{parentName:"p"},"index")," is out of range. See\n",(0,r.kt)("inlineCode",{parentName:"p"},"Variable.remove_dependency"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",null,"index: int\nIndex within ",(0,r.kt)("inlineCode",{parentName:"p"},"self.dependencies")," where the node to be\nremoved might be"),(0,r.kt)("a",{id:"csdl.core.node.Node.remove_dependency_node"}),(0,r.kt)("h3",{id:"remove_dependency_node"},"remove","_","dependency","_","node"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def remove_dependency_node(candidate)\n")),(0,r.kt)("p",null,"Remove dependency node. Does nothing if ",(0,r.kt)("inlineCode",{parentName:"p"},"candidate")," is not a\ndependency. Used for removing indirect dependencies and\npreventing cycles from forming in DAG."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",null,"candidate: Variable\nNode to remove from ",(0,r.kt)("inlineCode",{parentName:"p"},"self.dependencies")),(0,r.kt)("a",{id:"csdl.core.node.Node.get_dependent_index"}),(0,r.kt)("h3",{id:"get_dependent_index"},"get","_","dependent","_","index"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_dependent_index(candidate) -> Optional[int]\n")),(0,r.kt)("p",null,"Get index of dependency in ",(0,r.kt)("inlineCode",{parentName:"p"},"self.dependencies"),". Used for\nremoving indirect dependencies that woud otherwise affect the\ncost of branches in the DAG, which would affect execution order,\neven with the sme constraints on execution order."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",null,"candidate: Variable\nThe candidate dependency node"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",null,"Optional","[int]","\nIf ",(0,r.kt)("inlineCode",{parentName:"p"},"dependency")," is a dependency of ",(0,r.kt)("inlineCode",{parentName:"p"},"self"),", then the index of\n",(0,r.kt)("inlineCode",{parentName:"p"},"dependency")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"self.dependencies")," is returned. Otherwise,\n",(0,r.kt)("inlineCode",{parentName:"p"},"None")," is returned."),(0,r.kt)("a",{id:"csdl.core.node.Node._dedup_dependencies"}),(0,r.kt)("h3",{id:"_dedup_dependencies"},"_","dedup","_","dependencies"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _dedup_dependencies()\n")),(0,r.kt)("p",null,"Remove duplicate dependencies. Used when adding a dependency."),(0,r.kt)("a",{id:"csdl.core.node.Node.remove_dependent_by_index"}),(0,r.kt)("h3",{id:"remove_dependent_by_index"},"remove","_","dependent","_","by","_","index"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def remove_dependent_by_index(index)\n")),(0,r.kt)("p",null,"Remove dependency node, given its index. does nothing if\n",(0,r.kt)("inlineCode",{parentName:"p"},"index")," is out of range. See\n",(0,r.kt)("inlineCode",{parentName:"p"},"Variable.remove_dependency"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",null,"index: int\nIndex within ",(0,r.kt)("inlineCode",{parentName:"p"},"self.dependencies")," where the node to be\nremoved might be"),(0,r.kt)("a",{id:"csdl.core.node.Node.remove_dependent_node"}),(0,r.kt)("h3",{id:"remove_dependent_node"},"remove","_","dependent","_","node"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def remove_dependent_node(candidate)\n")),(0,r.kt)("p",null,"Remove dependency node. Does nothing if ",(0,r.kt)("inlineCode",{parentName:"p"},"candidate")," is not a\ndependency. Used for removing indirect dependencies and\npreventing cycles from forming in DAG."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",null,"candidate: Variable\nNode to remove from ",(0,r.kt)("inlineCode",{parentName:"p"},"self.dependencies")),(0,r.kt)("a",{id:"csdl.core.node.Node.print_dag"}),(0,r.kt)("h3",{id:"print_dag"},"print","_","dag"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def print_dag(depth=-1, indent='')\n")),(0,r.kt)("p",null,"Print the graph starting at this node (debugging tool)"),(0,r.kt)("a",{id:"csdl.core.node.Node.get_num_dependents"}),(0,r.kt)("h3",{id:"get_num_dependents"},"get","_","num","_","dependents"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_num_dependents()\n")),(0,r.kt)("a",{id:"csdl.core.variable"}),(0,r.kt)("h1",{id:"csdlcorevariable"},"csdl.core.variable"),(0,r.kt)("a",{id:"csdl.core.variable.slice_to_tuple"}),(0,r.kt)("h3",{id:"slice_to_tuple-1"},"slice","_","to","_","tuple"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def slice_to_tuple(key: slice, size: int) -> tuple\n")),(0,r.kt)("a",{id:"csdl.core.variable.Variable"}),(0,r.kt)("h2",{id:"variable-objects"},"Variable Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Variable(Node)\n")),(0,r.kt)("a",{id:"csdl.core.variable.Variable.__init__"}),(0,r.kt)("h3",{id:"__init__-6"},"_","_","init","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(name, val=1.0, shape=(1, ), units=None, desc='', tags=None, shape_by_conn=False, copy_shape=None, distributed=None, *args, **kwargs, *, ,)\n")),(0,r.kt)("a",{id:"csdl.core.variable.Variable.__pos__"}),(0,r.kt)("h3",{id:"__pos__"},"_","_","pos","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __pos__()\n")),(0,r.kt)("a",{id:"csdl.core.variable.Variable.__neg__"}),(0,r.kt)("h3",{id:"__neg__"},"_","_","neg","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __neg__()\n")),(0,r.kt)("a",{id:"csdl.core.variable.Variable.__add__"}),(0,r.kt)("h3",{id:"__add__"},"_","_","add","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __add__(other)\n")),(0,r.kt)("a",{id:"csdl.core.variable.Variable.__sub__"}),(0,r.kt)("h3",{id:"__sub__"},"_","_","sub","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __sub__(other)\n")),(0,r.kt)("a",{id:"csdl.core.variable.Variable.__mul__"}),(0,r.kt)("h3",{id:"__mul__"},"_","_","mul","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __mul__(other)\n")),(0,r.kt)("a",{id:"csdl.core.variable.Variable.__truediv__"}),(0,r.kt)("h3",{id:"__truediv__"},"_","_","truediv","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __truediv__(other)\n")),(0,r.kt)("a",{id:"csdl.core.variable.Variable.__pow__"}),(0,r.kt)("h3",{id:"__pow__"},"_","_","pow","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __pow__(other)\n")),(0,r.kt)("a",{id:"csdl.core.variable.Variable.__radd__"}),(0,r.kt)("h3",{id:"__radd__"},"_","_","radd","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __radd__(other)\n")),(0,r.kt)("a",{id:"csdl.core.variable.Variable.__rsub__"}),(0,r.kt)("h3",{id:"__rsub__"},"_","_","rsub","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __rsub__(other)\n")),(0,r.kt)("a",{id:"csdl.core.variable.Variable.__rmul__"}),(0,r.kt)("h3",{id:"__rmul__"},"_","_","rmul","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __rmul__(other)\n")),(0,r.kt)("a",{id:"csdl.core.variable.Variable.__rtruediv__"}),(0,r.kt)("h3",{id:"__rtruediv__"},"_","_","rtruediv","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __rtruediv__(other)\n")),(0,r.kt)("a",{id:"csdl.core.variable.Variable.__getitem__"}),(0,r.kt)("h3",{id:"__getitem__-1"},"_","_","getitem","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __getitem__(key: Union[int, slice, Tuple[slice]])\n")),(0,r.kt)("a",{id:"csdl.core.variable.Variable.add_dependency_node"}),(0,r.kt)("h3",{id:"add_dependency_node"},"add","_","dependency","_","node"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def add_dependency_node(dependency)\n")),(0,r.kt)("a",{id:"csdl.core.output"}),(0,r.kt)("h1",{id:"csdlcoreoutput"},"csdl.core.output"),(0,r.kt)("a",{id:"csdl.core.output.Output"}),(0,r.kt)("h2",{id:"output-objects"},"Output Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Output(Variable)\n")),(0,r.kt)("p",null,"Base class for outputs; used to prevent circular imports"),(0,r.kt)("a",{id:"csdl.core.output.Output.__init__"}),(0,r.kt)("h3",{id:"__init__-7"},"_","_","init","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(name, val=1.0, shape=(1, ), units=None, desc='', tags=None, shape_by_conn=False, copy_shape=None, distributed=None, res_units=None, lower=None, upper=None, ref=1.0, ref0=0.0, res_ref=1.0, op=None, *args, **kwargs, *, ,)\n")),(0,r.kt)("a",{id:"csdl.core.concatenation"}),(0,r.kt)("h1",{id:"csdlcoreconcatenation"},"csdl.core.concatenation"),(0,r.kt)("a",{id:"csdl.core.concatenation.Concatenation"}),(0,r.kt)("h2",{id:"concatenation-objects"},"Concatenation Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Concatenation(Output)\n")),(0,r.kt)("p",null,"Class for creating an explicit output"),(0,r.kt)("a",{id:"csdl.core.concatenation.Concatenation.__init__"}),(0,r.kt)("h3",{id:"__init__-8"},"_","_","init","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(name, val=1.0, shape: Tuple[int] = (1, ), units=None, desc='', tags=None, shape_by_conn=False, copy_shape=None, res_units=None, lower=None, upper=None, ref=1.0, ref0=0.0, res_ref=1.0, *args, **kwargs, *, ,)\n")),(0,r.kt)("p",null,"Initialize explicit output"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",null,"name: str\nName of variable to compute explicitly\nshape: Tuple","[int]","\nShape of variable to compute explicitly\nval: Number or ndarray\nInitial value of variable to compute explicitly"),(0,r.kt)("a",{id:"csdl.core.concatenation.Concatenation.__setitem__"}),(0,r.kt)("h3",{id:"__setitem__-1"},"_","_","setitem","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __setitem__(key: Union[int, slice, Tuple[slice]], var: Variable)\n")),(0,r.kt)("a",{id:"csdl.core.operation"}),(0,r.kt)("h1",{id:"csdlcoreoperation"},"csdl.core.operation"),(0,r.kt)("a",{id:"csdl.core.operation.Operation"}),(0,r.kt)("h2",{id:"operation-objects"},"Operation Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Operation(Node)\n")),(0,r.kt)("a",{id:"csdl.core.operation.Operation.__init__"}),(0,r.kt)("h3",{id:"__init__-9"},"_","_","init","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(*args, **kwargs, *, ,)\n")),(0,r.kt)("a",{id:"csdl.core.operation.Operation.add_dependency_node"}),(0,r.kt)("h3",{id:"add_dependency_node-1"},"add","_","dependency","_","node"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def add_dependency_node(dependency)\n")),(0,r.kt)("a",{id:"csdl.core.standard_operation"}),(0,r.kt)("h1",{id:"csdlcorestandard_operation"},"csdl.core.standard","_","operation"),(0,r.kt)("a",{id:"csdl.core.standard_operation.StandardOperation"}),(0,r.kt)("h2",{id:"standardoperation-objects"},"StandardOperation Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class StandardOperation(Operation)\n")),(0,r.kt)("a",{id:"csdl.core.standard_operation.StandardOperation.__init__"}),(0,r.kt)("h3",{id:"__init__-10"},"_","_","init","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(*args, **kwargs)\n")),(0,r.kt)("a",{id:"csdl.core.standard_operation.StandardOperation.define_compute_strings"}),(0,r.kt)("h3",{id:"define_compute_strings"},"define","_","compute","_","strings"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def define_compute_strings()\n")),(0,r.kt)("a",{id:"csdl.core.custom_operation"}),(0,r.kt)("h1",{id:"csdlcorecustom_operation"},"csdl.core.custom","_","operation"),(0,r.kt)("a",{id:"csdl.core.custom_operation.CustomOperation"}),(0,r.kt)("h2",{id:"customoperation-objects"},"CustomOperation Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class CustomOperation(Operation)\n")),(0,r.kt)("a",{id:"csdl.core.custom_operation.CustomOperation.__init__"}),(0,r.kt)("h3",{id:"__init__-11"},"_","_","init","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(*args, **kwargs)\n")),(0,r.kt)("a",{id:"csdl.core.custom_operation.CustomOperation.initialize"}),(0,r.kt)("h3",{id:"initialize-1"},"initialize"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def initialize()\n")),(0,r.kt)("p",null,"User defined method to declare parameter values. Parameters are\ncompile time constants (neither inputs nor outputs to the model)\nand cannot be updated at runtime. Parameters are intended to\nmake a ",(0,r.kt)("inlineCode",{parentName:"p"},"CustomOperation")," subclass definition generic, and therefore\nreusable. The example below shows how a ",(0,r.kt)("inlineCode",{parentName:"p"},"CustomOperation")," subclass\ndefinition uses parameters and how the user can set parameters\nwhen constructing the example ",(0,r.kt)("inlineCode",{parentName:"p"},"CustomOperation")," subclass. Note\nthat the user never instantiates nor inherits directly from the\n",(0,r.kt)("inlineCode",{parentName:"p"},"CustomOperation")," base class."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# in this example, we inherit from ExplicitOperation, but\n# the user can also inherit from ImplicitOperation\nclass Example(ExplicitOperation):\n    def initialize(self):\n        self.parameters.declare('in_name', types=str)\n        self.parameters.declare('out_name', types=str)\n\n    def define(self):\n        # use parameters declared in ``initialize``\n        in_name = self.parameters['in_name']\n        out_name = self.parameters['out_name']\n\n        self.add_input(in_name)\n        self.add_output(out_name)\n        self.declare_derivatives(out_name, in_name)\n\n    # define run time behavior by defining other methods...\n\n# compile using Simulator imported from back end...\nsim = Simulator(\n    Example(\n        in_name='x',\n        out_name='y',\n    ),\n)\n")),(0,r.kt)("a",{id:"csdl.core.custom_operation.CustomOperation.define"}),(0,r.kt)("h3",{id:"define-1"},"define"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def define()\n")),(0,r.kt)("p",null,"User defined method to define custom operation"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,".. code-block:: python"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"def define(self):\n    self.add_input('Cl')\n    self.add_input('Cd')\n    self.add_input('rho')\n    self.add_input('V')\n    self.add_input('S')\n    self.add_output('L')\n    self.add_output('D')\n\n    # declare derivatives of all outputs wrt all inputs\n    self.declare_derivatives('*', '*'))\n")),(0,r.kt)("a",{id:"csdl.core.custom_operation.CustomOperation.add_input"}),(0,r.kt)("h3",{id:"add_input"},"add","_","input"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def add_input(name, val=1.0, shape=(1, ), src_indices=None, flat_src_indices=None, units=None, desc='', tags=None, shape_by_conn=False, copy_shape=None)\n")),(0,r.kt)("p",null,"Add an input to this operation."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"class Example(ExplicitOperation):\n    def define(self):\n        self.add_input('Cl')\n        self.add_input('Cd')\n        self.add_input('rho')\n        self.add_input('V')\n        self.add_input('S')\n        self.add_output('L')\n        self.add_output('D')\n\n    # ...\n\nclass Example(ImplicitOperation):\n    def define(self):\n        self.add_input('a', val=1.)\n        self.add_input('b', val=-4.)\n        self.add_input('c', val=3.)\n        self.add_output('x', val=0.)\n\n    # ...\n")),(0,r.kt)("a",{id:"csdl.core.custom_operation.CustomOperation.add_output"}),(0,r.kt)("h3",{id:"add_output"},"add","_","output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def add_output(name, val=1.0, shape=(1, ), units=None, res_units=None, desc='', lower=None, upper=None, ref=1.0, ref0=0.0, res_ref=1.0, tags=None, shape_by_conn=False, copy_shape=None, distributed=None)\n")),(0,r.kt)("p",null,"Add an output to this operation."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"class Example(ExplicitOperation):\n    def define(self):\n        self.add_input('Cl')\n        self.add_input('Cd')\n        self.add_input('rho')\n        self.add_input('V')\n        self.add_input('S')\n        self.add_output('L')\n        self.add_output('D')\n\n    # ...\n\nclass Example(ImplicitOperation):\n    def define(self):\n        self.add_input('a', val=1.)\n        self.add_input('b', val=-4.)\n        self.add_input('c', val=3.)\n        self.add_output('x', val=0.)\n\n    # ...\n")),(0,r.kt)("a",{id:"csdl.core.custom_operation.CustomOperation.declare_derivatives"}),(0,r.kt)("h3",{id:"declare_derivatives"},"declare","_","derivatives"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def declare_derivatives(of, wrt, dependent=True, rows=None, cols=None, val=None, method='exact', step=None, form=None, step_calc=None)\n")),(0,r.kt)("p",null,"Declare partial derivatives of each output with respect to each\ninput (ExplicitOperation) or each residual associated with an output with\nrespect to the input/output (ImplicitOperation)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"class Example(ExplicitOperation):\n    def define(self):\n        self.add_input('Cl')\n        self.add_input('Cd')\n        self.add_input('rho')\n        self.add_input('V')\n        self.add_input('S')\n        self.add_output('L')\n        self.add_output('D')\n\n        # declare derivatives of all outputs wrt all inputs\n        self.declare_derivatives('*', '*')\n\n    # ...\n\nclass Example(ImplicitOperation):\n    def define(self):\n        self.add_input('a', val=1.)\n        self.add_input('b', val=-4.)\n        self.add_input('c', val=3.)\n        self.add_output('x', val=0.)\n        # declare derivative of residual associated with x\n        # wrt x\n        self.declare_derivatives('x', 'x')\n        # declare derivative of residual associated with x\n        # wrt a, b, c\n        self.declare_derivatives('x', ['a','b','c'])\n\n        self.linear_solver = ScipyKrylov()\n        self.nonlinear_solver = NewtonSolver(solve_subsystems=False)\n\n    # ...\n")),(0,r.kt)("a",{id:"csdl.core.subgraph"}),(0,r.kt)("h1",{id:"csdlcoresubgraph"},"csdl.core.subgraph"),(0,r.kt)("a",{id:"csdl.core.subgraph.Subgraph"}),(0,r.kt)("h2",{id:"subgraph-objects"},"Subgraph Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Subgraph(Node)\n")),(0,r.kt)("p",null,"Class for declaring an input variable"),(0,r.kt)("a",{id:"csdl.core.subgraph.Subgraph.__init__"}),(0,r.kt)("h3",{id:"__init__-12"},"_","_","init","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(name: str, submodel, *args, *, promotes=None, promotes_inputs=None, promotes_outputs=None, min_procs=1, max_procs=None, proc_weight=1.0, **kwargs, ,)\n")),(0,r.kt)("a",{id:"csdl.core.subgraph.Subgraph.add_dependency_node"}),(0,r.kt)("h3",{id:"add_dependency_node-2"},"add","_","dependency","_","node"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def add_dependency_node(dependency)\n")))}c.isMDXComponent=!0}}]);