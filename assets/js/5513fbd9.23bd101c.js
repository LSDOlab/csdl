"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5686],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return h}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var r=a.createContext({}),p=function(e){var n=a.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(r.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,r=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(t),h=i,u=c["".concat(r,".").concat(h)]||c[h]||d[h]||s;return t?a.createElement(u,o(o({ref:n},m),{},{components:t})):a.createElement(u,o({ref:n},m))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,o=new Array(s);o[0]=c;var l={};for(var r in n)hasOwnProperty.call(n,r)&&(l[r]=n[r]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<s;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},3584:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return r},metadata:function(){return p},toc:function(){return m},default:function(){return c}});var a=t(7462),i=t(3366),s=(t(7294),t(3905)),o=["components"],l={title:"Getting Started"},r=void 0,p={unversionedId:"tutorial/getting-started",id:"tutorial/getting-started",isDocsHomePage:!1,title:"Getting Started",description:"------------------------------------------------------------------------",source:"@site/docs/tutorial/2-getting-started.mdx",sourceDirName:"tutorial",slug:"/tutorial/getting-started",permalink:"/csdl/docs/tutorial/getting-started",editUrl:"https://github.com/lsdolab/csdl/edit/main/website/docs/tutorial/2-getting-started.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Getting Started"},sidebar:"docs",previous:{title:"Introduction",permalink:"/csdl/docs/tutorial/intro"},next:{title:"Language Concepts",permalink:"/csdl/docs/tutorial/concepts"}},m=[{value:"The Compilation Process",id:"the-compilation-process",children:[]},{value:"Model Specification",id:"model-specification",children:[]},{value:"Simulation Implementation",id:"simulation-implementation",children:[]},{value:"Making Models Generic",id:"making-models-generic",children:[]},{value:"The Complete Example",id:"the-complete-example",children:[]},{value:"Conclusion",id:"conclusion",children:[]}],d={toc:m};function c(e){var n=e.components,t=(0,i.Z)(e,o);return(0,s.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("hr",null),(0,s.kt)("p",null,"This section presents a first look at an example of a model defined\nusing CSDL.\nThe example shown in this section only shows some basic features of\nCSDL, and we will only be discussing them at a high level in this\nsection.\nLater, we'll go over the basic features in more detail, including\ndefining and solving optimization problems, as well as more advanced\nfeatures."),(0,s.kt)("h2",{id:"the-compilation-process"},"The Compilation Process"),(0,s.kt)("p",null,"CSDL simulations are written, compiled, and run within a Python script.\nThe code snippet below shows the definition, compilation, and execution\nof a basic simulation built using CSDL.\nWe will discuss and build upon this example throughout this section.\nThe complete example appears at the end of this section."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"from csdl import Model\nimport csdl\n\nclass Example(Model):\n    def define(self):\n        # model specification (not blank)\n        # ...\n\nfrom csdl_om import Simulator\n\nsim = Simulator(Example())\n\nsim.run()\nprint(sim[...])\nprint(sim[...])\nprint(sim[...])\n")),(0,s.kt)("p",null,"First, this script defines a class, ",(0,s.kt)("inlineCode",{parentName:"p"},"Example"),", which inherits from\n",(0,s.kt)("inlineCode",{parentName:"p"},"Model"),", which is part of the ",(0,s.kt)("inlineCode",{parentName:"p"},"csdl")," package.\nSecond, an object ",(0,s.kt)("inlineCode",{parentName:"p"},"sim")," of class ",(0,s.kt)("inlineCode",{parentName:"p"},"Simulator")," is constructed from an\ninstance of ",(0,s.kt)("inlineCode",{parentName:"p"},"Example"),".\nThird, ",(0,s.kt)("inlineCode",{parentName:"p"},"sim.run()")," is executed, and the script prints the result."),(0,s.kt)("p",null,"Before looking at the definition of ",(0,s.kt)("inlineCode",{parentName:"p"},"Example")," or the usage of either\n",(0,s.kt)("inlineCode",{parentName:"p"},"Example")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"Simulator"),", it is important to understand the role\nthat these two classes play in this example, and the role that ",(0,s.kt)("inlineCode",{parentName:"p"},"Model"),"\nand ",(0,s.kt)("inlineCode",{parentName:"p"},"Simulator")," play in all programs written in CSDL."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"Example")," class is a user defined class, where the user supplies a\nmathematical specification of the model we are interested in simulating.\nThe ",(0,s.kt)("inlineCode",{parentName:"p"},"Example")," class is not capable of running a full simulation or\ncomputing derivatives for use in solving an optimiztion problem -- it is\nsimply a description of the physical system.\nTo run a simulation, we need to construct an executable object that\nperforms the simulation."),(0,s.kt)("p",null,"As stated in the ",(0,s.kt)("a",{parentName:"p",href:"/docs/tutorial/install"},"Installation Instructions"),", we\nneed a separate package to provide the ",(0,s.kt)("inlineCode",{parentName:"p"},"Simulator")," class, which contains\nthe compiler back end.\nThe reason for this is that the CSDL compiler is a three stage compiler.\nThree stage compilers are split between a front end, which generates an\nintermediate representation of the code, a middle end, which performs\nimplementation-independent optimizations on the generated intermediate\nrepresentation, and a back end, which generates executable code.\nThe ",(0,s.kt)("inlineCode",{parentName:"p"},"csdl")," package implements the front end and middle end in the\n",(0,s.kt)("inlineCode",{parentName:"p"},"Model")," class, while a separate package implements the back end in the\n",(0,s.kt)("inlineCode",{parentName:"p"},"Simulator")," class.\nThis creates a clean separation between model specification and\nsimulation implementation.\nThis separation is central to creating a language where users can\noperate at the highest level of abstraction possible."),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","compiler framework figure")),(0,s.kt)("div",{className:"admonition admonition-important alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"important")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Although Python is an interpreted language, and CSDL code is written in\nPython, CSDL is a compiled language.\nThe two separate commands to initiate the compilation process and run\nthe resulting executable object merely takes place ",(0,s.kt)("em",{parentName:"p"},"within")," Python, but\nthe ",(0,s.kt)("inlineCode",{parentName:"p"},"Simulator")," class\n",(0,s.kt)("em",{parentName:"p"},"is not required to be implemented in any language in particular"),"."))),(0,s.kt)("p",null,"Now, let's look at how to specify models in CSDL."),(0,s.kt)("h2",{id:"model-specification"},"Model Specification"),(0,s.kt)("p",null,"To specify a model, create a new class that inherits from ",(0,s.kt)("inlineCode",{parentName:"p"},"Model"),".\nThe ",(0,s.kt)("inlineCode",{parentName:"p"},"Model")," class is the base class for all classes where a\nmathematical model of a system is specified.\nThe ",(0,s.kt)("inlineCode",{parentName:"p"},"Model.define")," method is where the mathematical model is\nspecified.\nThis is where most CSDL code is written, except for some advanced use\ncases that we'll cover later."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"class Example(Model):\n    def define(self):\n        p = self.declare_variable('p', shape=(2,))\n        x = p[0]\n        y = p[1]\n\n        distance = (x**2 + y**2)**(1/2)\n\n        self.register_output('distance', distance)\n")),(0,s.kt)("p",null,"Here we declare a variable named ",(0,s.kt)("inlineCode",{parentName:"p"},"'p'")," with shape ",(0,s.kt)("inlineCode",{parentName:"p"},"(2,)"),".\nThe name ",(0,s.kt)("inlineCode",{parentName:"p"},"'p'")," is the CSDL name of the variable.\nThis name is the name used to access data within the generated\nexecutable object contained in ",(0,s.kt)("inlineCode",{parentName:"p"},"sim"),".\nCSDL has no knowledge of Python names, so variables must be given a\nname as a string so that the resulting run time values may be accessed\nlater.\nThen we create two new variables, ",(0,s.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"y")," from ",(0,s.kt)("inlineCode",{parentName:"p"},"p"),".\nThese variables ",(0,s.kt)("em",{parentName:"p"},"do not")," have a name in CSDL.\nThey will not be accessible via the ",(0,s.kt)("inlineCode",{parentName:"p"},"Simulator")," API."),(0,s.kt)("p",null,"Next, we compute a distance, ",(0,s.kt)("inlineCode",{parentName:"p"},"distance"),", using the normal mathematical\noperations available in Python (aka special methods).\nThis variable does not have a name until we register it as an output\nusing ",(0,s.kt)("inlineCode",{parentName:"p"},"Model.register_output"),"."),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"We could also compute the distance using\n",(0,s.kt)("inlineCode",{parentName:"p"},"distance = csdl.norm(p)"),"."))),(0,s.kt)("div",{className:"admonition admonition-important alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"important")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"When using Python special methods, CSDL variables behave mostly like\nNumPy arrays, except that CSDL variables are immutable and do not\nsupport ",(0,s.kt)("a",{parentName:"p",href:"/docs/troubleshooting#broadcasting"},"broadcasting"),"."))),(0,s.kt)("p",null,"Sometimes it is desireable to store values from multiple variables in\none variable.\nFor this we use the ",(0,s.kt)("inlineCode",{parentName:"p"},"Model.create_output")," method:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"class Example(Model):\n    def define(self):\n        p = self.declare_variable('p', shape=(2,))\n        x = p[0]\n        y = p[1]\n\n        distance = (x**2 + y**2)**(1/2)\n\n        self.register_output('distance', distance)\n\n        q = self.create_output('q', shape=(3,))\n        q[:2] = p\n        q[-1] = distance\n")),(0,s.kt)("p",null,"Here, ",(0,s.kt)("inlineCode",{parentName:"p"},"q")," is named ",(0,s.kt)("inlineCode",{parentName:"p"},"'q'"),", and its value is defined after ",(0,s.kt)("inlineCode",{parentName:"p"},"q")," is\nconstructed.\nIn this case, ",(0,s.kt)("inlineCode",{parentName:"p"},"q")," stores ",(0,s.kt)("inlineCode",{parentName:"p"},"p")," (the position vector in ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"x"),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("mi",{parentName:"mrow"},"y")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"x-y")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.66666em",verticalAlign:"-0.08333em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.625em",verticalAlign:"-0.19444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y")))))," coordinates)\nand ",(0,s.kt)("inlineCode",{parentName:"p"},"distance"),"."),(0,s.kt)("div",{className:"admonition admonition-important alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"important")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Variable objects created using ",(0,s.kt)("inlineCode",{parentName:"p"},"Model")," methods do not store run time\nvalues, as the ",(0,s.kt)("inlineCode",{parentName:"p"},"Model")," class cannot run a full simulation.\nInstead, variable objects store a history of operations.\nThis history is the intermediate representation that ",(0,s.kt)("inlineCode",{parentName:"p"},"Model")," constructs\nat compile time."))),(0,s.kt)("div",{className:"admonition admonition-important alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"important")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Only variables created using ",(0,s.kt)("inlineCode",{parentName:"p"},"Model.create_output")," can use indexed\nassignment.\nThe indices from multiple assignments must not overlap."))),(0,s.kt)("h2",{id:"simulation-implementation"},"Simulation Implementation"),(0,s.kt)("p",null,"To construct a simulation implementation from the mathematical\nspecification defined in ",(0,s.kt)("inlineCode",{parentName:"p"},"Example"),", we need to construct an object of\nthe ",(0,s.kt)("inlineCode",{parentName:"p"},"Simulator")," class, which comes from a package separate from ",(0,s.kt)("inlineCode",{parentName:"p"},"csdl"),";\nin this case, ",(0,s.kt)("inlineCode",{parentName:"p"},"csdl_om"),".\nThe ",(0,s.kt)("inlineCode",{parentName:"p"},"Simulator")," class constructor always requires an instance of the\n",(0,s.kt)("inlineCode",{parentName:"p"},"Model")," class or any of its subclasses, so we provide it with an\ninstance of ",(0,s.kt)("inlineCode",{parentName:"p"},"Example"),"."),(0,s.kt)("p",null,"Once an object of the ",(0,s.kt)("inlineCode",{parentName:"p"},"Simulator")," class is constructed (in this example,\n",(0,s.kt)("inlineCode",{parentName:"p"},"sim"),"), the compilation process is complete, and we can run a\nsimulation.\nThe ",(0,s.kt)("inlineCode",{parentName:"p"},"sim")," object can also compute derivatives automatically, so if an\noptimization problem is defined (shown later in this tutorial), an\nexternal optimizer can be connected to ",(0,s.kt)("inlineCode",{parentName:"p"},"sim")," to solve the optimization\nproblem."),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"The compilation process can be as simple as a single line of code within\na Python script,"),(0,s.kt)("pre",{parentName:"div"},(0,s.kt)("code",{parentName:"pre",className:"language-py"},"sim = Simulator(Example(...))\n")),(0,s.kt)("p",{parentName:"div"},"and running the compiled code is as easy as,"),(0,s.kt)("pre",{parentName:"div"},(0,s.kt)("code",{parentName:"pre",className:"language-py"},"sim.run()\n")))),(0,s.kt)("p",null,"Because of the way the roles are split between ",(0,s.kt)("inlineCode",{parentName:"p"},"Model")," and\n",(0,s.kt)("inlineCode",{parentName:"p"},"Simulator"),", creating an instance of a ",(0,s.kt)("inlineCode",{parentName:"p"},"Model")," (or in this example,\n",(0,s.kt)("inlineCode",{parentName:"p"},"Example"),") class does not construct an object that can simulate the\nbehavior of a physical system."),(0,s.kt)("h2",{id:"making-models-generic"},"Making Models Generic"),(0,s.kt)("p",null,"So far, the ",(0,s.kt)("inlineCode",{parentName:"p"},"Example")," class only defines a single model.\nMultiple instances of ",(0,s.kt)("inlineCode",{parentName:"p"},"Example")," would result in a simulation that\nbehaves the exact same way.\nWe can make ",(0,s.kt)("inlineCode",{parentName:"p"},"Example")," more ",(0,s.kt)("em",{parentName:"p"},"generic")," by defining model parameters.\nTo define model parameters, define a ",(0,s.kt)("inlineCode",{parentName:"p"},"Model.initialize")," method."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"class Example(Model):\n    def initialize(self):\n        self.parameters.declare('scale', types=float, default=1)\n        self.parameters.declare('in_name', types=str)\n        self.parameters.declare('out_name', types=str)\n")),(0,s.kt)("p",null,"Model parameters are neither inputs to the model, nor are they computed\nby the model.\nInstead, model parameters make model definitions more generic.\nNote that defining an ",(0,s.kt)("inlineCode",{parentName:"p"},"initialize")," method is entirely optional.\nIn this case, users of ",(0,s.kt)("inlineCode",{parentName:"p"},"Example")," are free to choose the name of an\ninput variable and an output variable, as well as the value of some\nnumber called ",(0,s.kt)("inlineCode",{parentName:"p"},"'scale'"),".\nIf the ",(0,s.kt)("inlineCode",{parentName:"p"},"default")," option is not defined, then the parameter is required."),(0,s.kt)("p",null,"To use the parameters within the model definition,"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"class Example(Model):\n    def initialize(self):\n        self.parameters.declare('scale', types=float, default=1)\n        self.parameters.declare('in_name', types=str)\n        self.parameters.declare('out_name', types=str)\n\n    def define(self):\n        scale = self.parameters['scale']\n        in_name = self.parameters['in_name']\n        out_name = self.parameters['out_name']\n\n        # now we can use these parameters...\n")),(0,s.kt)("p",null,"You'll notice that the parameters defined in the ",(0,s.kt)("inlineCode",{parentName:"p"},"initialize")," method\nare accessed in the ",(0,s.kt)("inlineCode",{parentName:"p"},"define")," method.\nThe ",(0,s.kt)("inlineCode",{parentName:"p"},"initialize")," method is always called before the ",(0,s.kt)("inlineCode",{parentName:"p"},"define")," method,\nand all parameters declared in ",(0,s.kt)("inlineCode",{parentName:"p"},"initialize")," are available by the time\n",(0,s.kt)("inlineCode",{parentName:"p"},"define")," is called.\nThat is, you will always have access to parameters within the ",(0,s.kt)("inlineCode",{parentName:"p"},"define"),"\nmethod."),(0,s.kt)("p",null,"To change the definition of ",(0,s.kt)("inlineCode",{parentName:"p"},"Example")," for only one instance of\n",(0,s.kt)("inlineCode",{parentName:"p"},"Example"),", pass the values of the parameters as named arguments to the\nconstructor:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"e1 = Example(in_name='a', out_name='b')\ne2 = Example(in_name='a', out_name='b', scale=10)\ne3 = Example(in_name='r', out_name='s')\ne4 = Example(in_name='s', out_name='r', scale=10)\n")),(0,s.kt)("h2",{id:"the-complete-example"},"The Complete Example"),(0,s.kt)("p",null,"Looking at the complete example, we see that the variables ",(0,s.kt)("inlineCode",{parentName:"p"},"p")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"q"),"\nnow have CSDL names that are specified only when ",(0,s.kt)("inlineCode",{parentName:"p"},"Example")," is\ninstantiated.\nWe also see that ",(0,s.kt)("inlineCode",{parentName:"p"},"q[:2]")," is equal to the position, scaled by a factor\n",(0,s.kt)("inlineCode",{parentName:"p"},"scale"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"from csdl import Model\nimport csdl\n\nclass Example(Model):\n    def initialize(self):\n        self.parameters.declare('scale', types=float, default=1)\n        self.parameters.declare('in_name', types=str)\n        self.parameters.declare('out_name', types=str)\n\n    def define(self):\n        scale = self.parameters['scale']\n        in_name = self.parameters['in_name']\n        out_name = self.parameters['out_name']\n\n        p = self.declare_variable(in_name, shape=(2,))\n        x = p[0]\n        y = p[1]\n\n        distance = (x**2 + y**2)**(1/2)\n\n        self.register_output('distance', distance)\n\n        q = self.create_output(out_name, shape=(3,))\n        q[:2] = scale*p\n        q[-1] = distance\n\nfrom csdl_om import Simulator\n\nin_name = 't'\nout_name = 'u'\nsim = Simulator(Example(in_name='t', out_name='u'))\n\nsim.run()\nprint(sim[in_name])\nprint(sim['distance'])\nprint(sim[out_name])\n")),(0,s.kt)("h2",{id:"conclusion"},"Conclusion"),(0,s.kt)("p",null,"This is only a taste of what CSDL has to offer, but it should be enough\nto get you started building basic models that you could otherwise build\nin Python.\nIn the next section, we'll cover the basic language concepts without\nrelying so much on examples.\nLater, we'll dive deeper into the basics of CSDL, and move on to more\nadvanced features."))}c.isMDXComponent=!0}}]);