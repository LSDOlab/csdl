"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5322],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return u}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),f=p(t),u=o,m=f["".concat(l,".").concat(u)]||f[u]||d[u]||i;return t?r.createElement(m,s(s({ref:n},c),{},{components:t})):r.createElement(m,s({ref:n},c))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,s=new Array(i);s[0]=f;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var p=2;p<i;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},2284:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return f}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),s=["components"],a={title:"Adding Standard Library Operations",sidebar_position:3},l="Adding Standard Library Operations",p={unversionedId:"developer/contributing/std_lib",id:"developer/contributing/std_lib",isDocsHomePage:!1,title:"Adding Standard Library Operations",description:"- [ ] TODO: incomplete",source:"@site/docs/developer/contributing/std_lib.mdx",sourceDirName:"developer/contributing",slug:"/developer/contributing/std_lib",permalink:"/csdl/docs/developer/contributing/std_lib",editUrl:"https://github.com/lsdolab/csdl/edit/main/website/docs/developer/contributing/std_lib.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Adding Standard Library Operations",sidebar_position:3},sidebar:"docs",previous:{title:"Adding Examples for Testing and Documentation",permalink:"/csdl/docs/developer/contributing/examples"},next:{title:"Request for Comments (RFC) Process",permalink:"/csdl/docs/developer/contributing/rfc"}},c=[],d={toc:c};function f(e){var n=e.components,t=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"adding-standard-library-operations"},"Adding Standard Library Operations"),(0,i.kt)("ul",{className:"contains-task-list"},(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","TODO: incomplete")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"from csdl.core.standard_operation import StandardOperation\n\nclass new_operation(StandardOperation):\n    def __init__(self, *args, **kwargs):\n        # number of outputs\n        self.nouts = 1\n        # number of arguments\n        self.nargs = 1\n        # call StandardOperation constructor\n        super().__init__(*args, **kwargs)\n        # define properties for middle end to exploit when\n        # performing implementation independent optimizations\n        self.properties['iterative'] = False\n        self.properties['elementwise'] = True\n\n    def define_compute_strings(self):\n        in_name = self.dependencies[0].name\n        out_name = self.outs[0].name\n        self.compute_string = '{}=np.arccos({})'.format(out_name,\n        in_name)\n\nclass power_combination(StandardOperation):\n    def __init__(self, *args, powers, coeff, **kwargs):\n        self.nouts = 1\n        self.nargs = None\n        super().__init__(*args, **kwargs)\n        dep0 = self.dependencies[0]\n        for dep in self.dependencies:\n            if dep0.shape != dep.shape:\n                raise ValueError(\n                    \"Shapes of inputs to linear_combination do not match\")\n        self.properties['iterative'] = False\n        self.properties['elementwise'] = True\n\n        self.outs = [\n            Output(\n                None,\n                op=self,\n                shape=self.dependencies[0].shape,\n            )\n        ]\n\n        self.literals['powers'] = powers\n        self.literals['coeff'] = coeff\n\n    def define_compute_strings(self):\n        out_name = self.outs[0].name\n        self.compute_string = '{}='.format(out_name)\n        args = self.dependencies\n        powers = self.literals['powers']\n        coeff = self.literals['coeff']\n        # if isinstance(constant, np.ndarray):\n        #     raise notimplementederror(\"constant must be a scalar constant\")\n        if isinstance(powers, (int, float)):\n            powers = [powers] * len(args)\n        self.compute_string = '{}={}'.format(out_name, coeff)\n        for arg, power in zip(args, powers):\n            if not np.all(coeff == 0):\n                self.compute_string += '*{}**{}'.format(arg.name, power)\n            else:\n                self.compute_string = '0'\n")))}f.isMDXComponent=!0}}]);