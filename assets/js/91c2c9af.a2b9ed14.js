"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9922],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return h}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(t),h=i,u=c["".concat(s,".").concat(h)]||c[h]||d[h]||r;return t?a.createElement(u,o(o({ref:n},m),{},{components:t})):a.createElement(u,o({ref:n},m))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},7947:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return m},default:function(){return c}});var a=t(7462),i=t(3366),r=(t(7294),t(3905)),o=["components"],l={title:"A Simple Example to Get Started"},s=void 0,p={unversionedId:"tutorial/simple_example",id:"tutorial/simple_example",isDocsHomePage:!1,title:"A Simple Example to Get Started",description:"------------------------------------------------------------------------",source:"@site/docs/tutorial/2-simple_example.mdx",sourceDirName:"tutorial",slug:"/tutorial/simple_example",permalink:"/csdl/docs/tutorial/simple_example",editUrl:"https://github.com/lsdolab/csdl/edit/main/website/docs/tutorial/2-simple_example.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"A Simple Example to Get Started"},sidebar:"docs",previous:{title:"Installation Instructions",permalink:"/csdl/docs/tutorial/install"},next:{title:"Language Concepts",permalink:"/csdl/docs/tutorial/concepts"}},m=[],d={toc:m};function c(e){var n=e.components,t=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Note that mathematical models alone cannot be used to run a simulation.\nTo build a simulation implementation and run simulations, a back end for\nthe CSDL compiler is required"),(0,r.kt)("p",null,"This section presents a first look at an example of a model defined\nusing CSDL.\nYou don't have to understand the example the first time you look at it;\nthis example is here to provide a reference point for the discussion\nthat follows.\nAlso note that this example only shows some basic features of CSDL, and\nwe will only be discussing them at a high level in this section.\nLater, we'll go over the basic features in more detail, as well as more\nadvanced features."),(0,r.kt)("ul",{className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","TODO: add submodel, add design variables, objective, constraints")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"from csdl import Model\nimport csdl\n\nclass Example(Model):\n    def initialize(self):\n        self.parameters.declare('in_name', types=str)\n        self.parameters.declare('out_name', types=str)\n\n    def define(self):\n        in_name = self.parameters['in_name']\n        out_name = self.parameters['out_name']\n\n        p = self.declare_variable(in_name, shape=(2,))\n        x = p[0]\n        y = p[1]\n\n        distance = (x**2 + y**2)**(1/2)\n\n        self.register_output('distance', distance)\n\n        p_out = self.create_output(out_name, shape=(3,))\n        p_out[:2] = p\n        p_out[-1] = distance\n\nfrom csdl_om import Simulator\n\nin_name = 't'\nout_name = 'u'\nsim = Simulator(Example(in_name='t', out_name='u'))\nsim.run()\nprint(sim[in_name])\nprint(sim['distance'])\nprint(sim[out_name])\n")),(0,r.kt)("p",null,"The first thing to notice is the two main classes used in this script,\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"Example")," class, which inherits from ",(0,r.kt)("inlineCode",{parentName:"p"},"Model"),", and the\n",(0,r.kt)("inlineCode",{parentName:"p"},"Simulator")," class.\nBefore looking at the definition of ",(0,r.kt)("inlineCode",{parentName:"p"},"Example")," or the usage of either\n",(0,r.kt)("inlineCode",{parentName:"p"},"Example")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Simulator"),", it is important to understand the role\nthat these two classes play in this example, and the role that ",(0,r.kt)("inlineCode",{parentName:"p"},"Model"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"Simulator")," play in all programs written in CSDL.\nEven though Python is an interpreted language, CSDL is a compiled\nlanguage."),(0,r.kt)("p",null,"The CSDL compiler is a three stage compiler.\nThree stage compilers are split between a front end, which generates an\nintermediate representation of the code, a middle end, which performs\nimplementation-independent optimizations on the generated intermediatea\nrepresentation, and a back end, which generates executable code.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"csdl")," package implements the front end and middle end in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," class, while a separate package implements the back end in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"Simulator")," class."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," class interface is\nBecause of the way the roles are split between ",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"Simulator"),", creating an instance of a ",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," (or in this example,\n",(0,r.kt)("inlineCode",{parentName:"p"},"Example"),") class does not construct an object that can simulate the\nbehavior of\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Simulator")," classes are Python interfaces to the\nCSDL compiler."),(0,r.kt)("p",null,"Understanding the importance"),(0,r.kt)("p",null,"The first line imports the ",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," class.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," class is the base class for all classes where a\nmathematical model of a system is specified.\nThe example above shows a mathematical model defined using a class\ncalled ",(0,r.kt)("inlineCode",{parentName:"p"},"Example"),".\nThere are two methods in ",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," that the user is free to define:\n",(0,r.kt)("inlineCode",{parentName:"p"},"initialize")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"define"),"."),(0,r.kt)("p",null,"The first method, ",(0,r.kt)("inlineCode",{parentName:"p"},"initialize"),", is used for defining model parameters.\nModel parameters are neither inputs to the model, nor are they computed\nby the model.\nInstead, model parameters make model definitions more generic.\nNote that the choice of defining an ",(0,r.kt)("inlineCode",{parentName:"p"},"initialize")," method is entirely\noptional.\nIn this case, users of ",(0,r.kt)("inlineCode",{parentName:"p"},"Example")," are free to choose the name of an\ninput variable and an output variable."),(0,r.kt)("p",null,"The second method, ",(0,r.kt)("inlineCode",{parentName:"p"},"define"),", is where the mathematical model is\nspecified.\nThis is where most CSDL code is written, except for some advanced use\ncases that we'll cover later.\nYou'll notice that the parameters defined in the ",(0,r.kt)("inlineCode",{parentName:"p"},"initialize")," method\nare accessed in the ",(0,r.kt)("inlineCode",{parentName:"p"},"define")," method.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"initialize")," method is always called before the ",(0,r.kt)("inlineCode",{parentName:"p"},"define")," method,\nand all parameters declared in ",(0,r.kt)("inlineCode",{parentName:"p"},"initialize")," are available by the time\n",(0,r.kt)("inlineCode",{parentName:"p"},"define")," is called.\nThat is, you will always have access to parameters within the ",(0,r.kt)("inlineCode",{parentName:"p"},"define"),"\nmethod."),(0,r.kt)("p",null,"After getting all the relevant parameters, this example declares a\nvariable using the ",(0,r.kt)("inlineCode",{parentName:"p"},"declare_variable")," method.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"declare_variable")," method is used for declaring a variable that is\nan input to the instance of the class, in this case, ",(0,r.kt)("inlineCode",{parentName:"p"},"Example"),".\nSpecifically, the declared variable is an output of a parent model or a\nchild model.\nIn this example, the only instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"Example")," is the top level model\nin the hierarchy, and it has no children, so by default, ",(0,r.kt)("inlineCode",{parentName:"p"},"p")," is an\ninput to the model from an external source.\nThe variable ",(0,r.kt)("inlineCode",{parentName:"p"},"p")," is declared to have the name ",(0,r.kt)("inlineCode",{parentName:"p"},"in_name"),".\nThe name of the variable and the name passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"declare_variable"),"\nneed not be the same, although keeping them the same makes your code\neasier to read.\nThe name ",(0,r.kt)("inlineCode",{parentName:"p"},"in_name")," will be used to access the value after the\nsimulation runs.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"declare_variable")," method also has a ",(0,r.kt)("inlineCode",{parentName:"p"},"shape")," keyword argument,\nwhich specifies the dimensions of a tensor.\nBy default, ",(0,r.kt)("inlineCode",{parentName:"p"},"shape=(1,)"),", which represents a rank-1 tensor with its\none dimension, 1, i.e. a scalar.\nIn this example, ",(0,r.kt)("inlineCode",{parentName:"p"},"shape=(2,)")," represents a 2-vector."),(0,r.kt)("p",null,"Next, ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," are defined in terms of ",(0,r.kt)("inlineCode",{parentName:"p"},"p"),".\nThen, the distance is computed using ",(0,r.kt)("inlineCode",{parentName:"p"},"csdl.sqrt"),".\nNote that we could also compute the distance using\n",(0,r.kt)("inlineCode",{parentName:"p"},"distance = csdl.norm(p)"),".\nThe next"))}c.isMDXComponent=!0}}]);