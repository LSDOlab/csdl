"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6243],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,m=a(e,["components","mdxType","originalType","parentName"]),u=c(t),d=o,f=u["".concat(s,".").concat(d)]||u[d]||p[d]||i;return t?r.createElement(f,l(l({ref:n},m),{},{components:t})):r.createElement(f,l({ref:n},m))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,l=new Array(i);l[0]=u;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,l[1]=a;for(var c=2;c<i;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3147:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return m},default:function(){return u}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),l=["components"],a={},s=void 0,c={unversionedId:"worked_examples/ex_implicit_with_subsystems",id:"worked_examples/ex_implicit_with_subsystems",isDocsHomePage:!1,title:"ex_implicit_with_subsystems",description:"`py",source:"@site/docs/worked_examples/ex_implicit_with_subsystems.mdx",sourceDirName:"worked_examples",slug:"/worked_examples/ex_implicit_with_subsystems",permalink:"/csdl/docs/worked_examples/ex_implicit_with_subsystems",editUrl:"https://github.com/lsdolab/csdl/edit/main/website/docs/worked_examples/ex_implicit_with_subsystems.mdx",tags:[],version:"current",frontMatter:{}},m=[],p={toc:m};function u(e){var n=e.components,t=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"from csdl_om import Simulator\nfrom csdl import Model, ImplicitModel, ScipyKrylov, NewtonSolver, NonlinearBlockGS\nimport numpy as np\n\n\nclass ExampleWithSubsystems(ImplicitModel):\n    def define(self):\n        # define a subsystem (this is a very simple example)\n        model = Model()\n        p = model.create_input('p', val=7)\n        q = model.create_input('q', val=8)\n        r = p + q\n        model.register_output('r', r)\n\n        # add child system\n        self.add(model, name='R')\n        # declare output of child system as input to parent system\n        r = self.declare_variable('r')\n\n        c = self.declare_variable('c', val=18)\n\n        # a == (3 + a - 2 * a**2)**(1 / 4)\n        model = Model()\n        a = model.create_output('a')\n        a.define((3 + a - 2 * a**2)**(1 / 4))\n        model.nonlinear_solver = NonlinearBlockGS(iprint=0, maxiter=100)\n        self.add(model, name='coeff_a')\n\n        a = self.declare_variable('a')\n\n        model = Model()\n        model.create_input('b', val=-4)\n        self.add(model, name='coeff_b')\n\n        b = self.declare_variable('b')\n        y = self.create_implicit_output('y')\n        z = a * y**2 + b * y + c - r\n        y.define_residual(z)\n        self.linear_solver = ScipyKrylov()\n        self.nonlinear_solver = NewtonSolver(\n            solve_subsystems=False,\n            maxiter=100,\n        )\n\n\nsim = Simulator(ExampleWithSubsystems())\nsim.run()\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"=====\nmodel\n=====\nNL: Newton Converged in 3 iterations\n")))}u.isMDXComponent=!0}}]);